---
layout: post
title: "ruby入门算法: 获得小于N的所有奇数"
date: "2022-06-09"
categories: 
---

                    <blockquote> 
 <h1>Ruby 方法</h1> 
 <p>Ruby 方法与其他编程语言中的函数类似。Ruby 方法用于捆绑一个或多个重复的语句到一个单元中。</p> 
 <p>方法名应以小写字母开头。如果您以大写字母作为方法名的开头，Ruby 可能会把它当作常量，从而导致不正确地解析调用。</p> 
 <p>方法应在调用之前定义，否则 Ruby 会产生未定义的方法调用异常。</p> 
 <h2>语法</h2> 
 <pre><code class="language-ruby">
def method_name [( [arg [= default]]...[, * arg [, &amp;expr ]])]
   expr..
end
</code></pre> 
 <h2>类方法</h2> 
 <p>当方法定义在类的外部，方法默认标记为 <em>private</em>。另一方面，如果方法定义在类中的，则默认标记为 public。</p> 
 <p>方法默认的可见性和 <em>private</em> 标记可通过模块（Module）的 <em>public</em> 或 <em>private</em> 改变。</p> 
 <p>当你想要访问类的方法时，您首先需要实例化类。然后，使用对象，您可以访问类的任何成员。</p> 
 <p>Ruby 提供了一种不用实例化即可访问方法的方式。让我们看看如何声明并访问类方法</p> 
 <pre><code class="language-ruby">
class Accounts
   def reading_charge
   end
   def Accounts.return_date
   end
end
</code></pre> 
 <p>可以定义一个简单的方法，如下所示</p> 
 <pre><code class="language-ruby">
def method_name 
   expr..
end
</code></pre> 
 <p>可以定义一个接受参数的方法，如下所示</p> 
 <pre><code class="language-ruby">
def method_name (var1, var2)
   expr..
end
</code></pre> 
 <p>可以为参数设置默认值，如果方法调用时未传递必需的参数则使用默认值</p> 
 <pre><code class="language-ruby">
def method_name (var1=value1, var2=value2)
   expr..
end
</code></pre> 
 <p>要调用方法时，只需要使用方法名即可，如下所示</p> 
 <pre><code class="language-ruby">method_name</code></pre> 
 <p>调用带参数的方法时，在写方法名时还要带上参数，</p> 
 <pre><code class="language-ruby">method_name 25, 30
</code></pre> 
 <p></p> 
</blockquote> 
<p></p> 
<p></p> 
<blockquote> 
 <p>ruby入门算法: 获得小于N的所有奇数需要实现这样的函数：</p> 
 <pre>print_odd_number(n)   #  n为最大值

例如：

print_odd_number(10) # =&gt; 1,3,5,7,9
</pre> 
 <pre><code class="language-ruby">def print_jishu(n)

  for i in 1..n
    if i % 2 &gt; 0 
      print i
    end 

  end 

end

print_jishu(20)
</code></pre> 
 <p style="text-align:center;"><img alt="" src="https://img-blog.csdnimg.cn/a9def85818904e4f82f1633f368b163b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6K645aKo44Gu5bCP6J206J22,size_20,color_FFFFFF,t_70,g_se,x_16"></p> 
 <p> </p> 
</blockquote>
                
