---
layout: post
title: "js var 的简单使用"
date: "2023-10-13"
categories: 
---
<p>refer: <a href="https://www.freecodecamp.org/chinese/news/javascript-var-let-and-const/">https://www.freecodecamp.org/chinese/news/javascript-var-let-and-const/</a></p>
<p>{% highlight html %}var{% endhighlight %}可以在全局范围声明或函数/局部范围内声明。</p>
<p>当在最外层函数的外部声明{% highlight html %}var{% endhighlight %}变量时，作用域是全局的。这意味着在最外层函数的外部用{% highlight html %}var{% endhighlight %}声明的任何变量都可以在{% highlight html %}windows{% endhighlight %}中使用。</p>
<p>例如：</p>
{% highlight html %}var tester = &#39;hey hi&#39;;
function newFunction() {
var hello = &#39;hello&#39;;
}
console.log(hello); // error: hello is not defined
{% endhighlight %}
<p>var变量可以重复声明和修改</p>
<p>例如：</p>
{% highlight html %}var greeter = &#39;hey hi&#39;;
var greeter = &#39;say Hello instead&#39;;
{% endhighlight %}
<p>例如：</p>
{% highlight html %}var greeter = &#39;hey hi&#39;;
greeter = &#39;say Hello instead&#39;;
{% endhighlight %}
<p>&nbsp;</p>
<p>（可以不看了。）</p>
<p>var可以进行变量提升：<br />
变量提升是 JavaScript 的一种机制:在执行代码之前，变量和函数声明会移至其作用域的顶部</p>
<p>例如：</p>
{% highlight html %}console.log(greeter);
var greeter = &#39;say hello&#39;;{% endhighlight %}
<p>{% highlight html %}在编译的时候会被理解为：{% endhighlight %}</p>
{% highlight html %}var greeter;
console.log(greeter); // greeter is undefined
greeter = &#39;say hello&#39;;
{% endhighlight %}
<p>例如写一个test.js：</p>
<p>{% highlight html %}console.log(greeter);<br />
var greeter = &#39;say hello&#39;;<br />
console.log(greeter);{% endhighlight %}</p>
<p>然后运行：<br />
{% highlight html %}node test.js{% endhighlight %}</p>
<p>输出：</p>
<p>{% highlight html %}undefined<br />
say hello{% endhighlight %}</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
