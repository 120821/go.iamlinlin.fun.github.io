---
layout: post
title: "gorm -  CRUD 接口  查询"
date: "2022-10-31"
categories: 
---
<p><a href="https://learnku.com/docs/gorm/v2/query/9733">https://learnku.com/docs/gorm/v2/query/9733</a></p>

<p id="07b3f9"><strong>检索单个对象</strong></p>

<p>GORM 提供了 <code>First</code>、<code>Take</code>、<code>Last</code> 方法，以便从数据库中检索单个对象。当查询数据库时它添加了 <code>LIMIT 1</code> 条件，且没有找到记录时，它会返回 <code>ErrRecordNotFound</code> 错误</p>

<p>// 获取第一条记录（主键升序）<br />
db.First(&amp;user)<br />
// SELECT * FROM users ORDER BY id LIMIT 1;</p>

<p>// 获取一条记录，没有指定排序字段<br />
db.Take(&amp;user)<br />
// SELECT * FROM users LIMIT 1;</p>

<p>// 获取最后一条记录（主键降序）<br />
db.Last(&amp;user)<br />
// SELECT * FROM users ORDER BY id DESC LIMIT 1;</p>

<p>result := db.First(&amp;user)<br />
result.RowsAffected // 返回找到的记录数<br />
result.Error&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // returns error</p>

<p>// 检查 ErrRecordNotFound 错误<br />
errors.Is(result.Error, gorm.ErrRecordNotFound)</p>

<p><code>First</code>、<code>Last</code> 方法会根据主键查找到第一个、最后一个记录， 它仅在通过 struct 或提供 model 值进行查询时才起作用。 如果 model 类型没有定义主键，则按第一个字段排序，例如：</p>

<p>var user User</p>

<p>// 可以<br />
db.First(&amp;user)<br />
// SELECT * FROM `users` ORDER BY `users`.`id` LIMIT 1</p>

<p>// 可以<br />
result := map[string]interface{}{}<br />
db.Model(&amp;User{}).First(&amp;result)<br />
// SELECT * FROM `users` ORDER BY `users`.`id` LIMIT 1</p>

<p>// 不行<br />
result := map[string]interface{}{}<br />
db.Table(&quot;users&quot;).First(&amp;result)</p>

<p>// 但可以配合 Take 使用<br />
result := map[string]interface{}{}<br />
db.Table(&quot;users&quot;).Take(&amp;result)</p>

<p>// 根据第一个字段排序<br />
type Language struct {<br />
&nbsp; Code string<br />
&nbsp; Name string<br />
}<br />
db.First(&amp;Language{})<br />
// SELECT * FROM `languages` ORDER BY `languages`.`code` LIMIT 1</p>

<p id="d5503f"><strong>根据主键检索</strong></p>

<p>您可以使用 <a href="https://learnku.com/docs/gorm/v2/query#inline_conditions">内联条件</a> 来检索对象。 传入字符串参数时注意避免 SQL 注入问题，查看 <a href="https://learnku.com/docs/gorm/v2/security">安全</a> 获取详情</p>

<p>db.First(&amp;user, 10)<br />
// SELECT * FROM users WHERE id = 10;</p>

<p>db.First(&amp;user, &quot;10&quot;)<br />
// SELECT * FROM users WHERE id = 10;</p>

<p>db.Find(&amp;users, []int{1,2,3})<br />
// SELECT * FROM users WHERE id IN (1,2,3);</p>

<p id="2c4d69"><strong>检索全部对象</strong></p>

<p>// 获取全部记录<br />
result := db.Find(&amp;users)<br />
// SELECT * FROM users;</p>

<p>result.RowsAffected // 返回找到的记录数，相当于 `len(users)`<br />
result.Error&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // returns error</p>

<p id="69fbb2"><strong>条件</strong></p>

<p id="6d0509"><strong>String 条件</strong></p>

<p>// 获取第一条匹配的记录<br />
db.Where(&quot;name = ?&quot;, &quot;jinzhu&quot;).First(&amp;user)<br />
// SELECT * FROM users WHERE name = &#39;jinzhu&#39; ORDER BY id LIMIT 1;</p>

<p>// 获取全部匹配的记录<br />
db.Where(&quot;name &lt;&gt; ?&quot;, &quot;jinzhu&quot;).Find(&amp;users)<br />
// SELECT * FROM users WHERE name &lt;&gt; &#39;jinzhu&#39;;</p>

<p>// IN<br />
db.Where(&quot;name IN ?&quot;, []string{&quot;jinzhu&quot;, &quot;jinzhu 2&quot;}).Find(&amp;users)<br />
// SELECT * FROM users WHERE name IN (&#39;jinzhu&#39;,&#39;jinzhu 2&#39;);</p>

<p>// LIKE<br />
db.Where(&quot;name LIKE ?&quot;, &quot;%jin%&quot;).Find(&amp;users)<br />
// SELECT * FROM users WHERE name LIKE &#39;%jin%&#39;;</p>

<p>// AND<br />
db.Where(&quot;name = ? AND age &gt;= ?&quot;, &quot;jinzhu&quot;, &quot;22&quot;).Find(&amp;users)<br />
// SELECT * FROM users WHERE name = &#39;jinzhu&#39; AND age &gt;= 22;</p>

<p>// Time<br />
db.Where(&quot;updated_at &gt; ?&quot;, lastWeek).Find(&amp;users)<br />
// SELECT * FROM users WHERE updated_at &gt; &#39;2000-01-01 00:00:00&#39;;</p>

<p>// BETWEEN<br />
db.Where(&quot;created_at BETWEEN ? AND ?&quot;, lastWeek, today).Find(&amp;users)<br />
// SELECT * FROM users WHERE created_at BETWEEN &#39;2000-01-01 00:00:00&#39; AND &#39;2000-01-08 00:00:00&#39;;</p>

<p id="86184f">Struct &amp; Map 条件</p>

<p>// Struct<br />
db.Where(&amp;User{Name: &quot;jinzhu&quot;, Age: 20}).First(&amp;user)<br />
// SELECT * FROM users WHERE name = &quot;jinzhu&quot; AND age = 20 ORDER BY id LIMIT 1;</p>

<p>// Map<br />
db.Where(map[string]interface{}{&quot;name&quot;: &quot;jinzhu&quot;, &quot;age&quot;: 20}).Find(&amp;users)<br />
// SELECT * FROM users WHERE name = &quot;jinzhu&quot; AND age = 20;</p>

<p>// 主键切片条件<br />
db.Where([]int64{20, 21, 22}).Find(&amp;users)<br />
// SELECT * FROM users WHERE id IN (20, 21, 22);</p>

<p>当使用结构作为条件查询时，GORM 只会查询非零值字段。这意味着如果您的字段值为 <code>0</code>、<code>&#39;&#39;</code>、<code>false</code> 或其他 <a href="https://tour.golang.org/basics/12" rel="nofollow noopener noreferrer">零值</a>，该字段不会被用于构建查询条件，例如：</p>

<p>db.Where(&amp;User{Name: &quot;jinzhu&quot;, Age: 0}).Find(&amp;users)<br />
// SELECT * FROM users WHERE name = &quot;jinzhu&quot;;</p>

<p>您可以使用 map 来构建查询条件，例如：</p>

<p>db.Where(map[string]interface{}{&quot;Name&quot;: &quot;jinzhu&quot;, &quot;Age&quot;: 0}).Find(&amp;users)<br />
// SELECT * FROM users WHERE name = &quot;jinzhu&quot; AND age = 0;</p>

<p id="eee8d3"><strong>内联条件</strong></p>

<p>用法与 <code>Where</code> 类似</p>

<p>// SELECT * FROM users WHERE id = 23;<br />
// 根据主键获取记录，如果是非整型主键<br />
db.First(&amp;user, &quot;id = ?&quot;, &quot;string_primary_key&quot;)<br />
// SELECT * FROM users WHERE id = &#39;string_primary_key&#39;;</p>

<p>// Plain SQL<br />
db.Find(&amp;user, &quot;name = ?&quot;, &quot;jinzhu&quot;)<br />
// SELECT * FROM users WHERE name = &quot;jinzhu&quot;;</p>

<p>db.Find(&amp;users, &quot;name &lt;&gt; ? AND age &gt; ?&quot;, &quot;jinzhu&quot;, 20)<br />
// SELECT * FROM users WHERE name &lt;&gt; &quot;jinzhu&quot; AND age &gt; 20;</p>

<p>// Struct<br />
db.Find(&amp;users, User{Age: 20})<br />
// SELECT * FROM users WHERE age = 20;</p>

<p>// Map<br />
db.Find(&amp;users, map[string]interface{}{&quot;age&quot;: 20})<br />
// SELECT * FROM users WHERE age = 20;</p>

<p id="c4ef1b"><strong>Not 条件</strong></p>

<p>构建 NOT 条件，用法与 <code>Where</code> 类似</p>

<p>db.Not(&quot;name = ?&quot;, &quot;jinzhu&quot;).First(&amp;user)<br />
// SELECT * FROM users WHERE NOT name = &quot;jinzhu&quot; ORDER BY id LIMIT 1;</p>

<p>// Not In<br />
db.Not(map[string]interface{}{&quot;name&quot;: []string{&quot;jinzhu&quot;, &quot;jinzhu 2&quot;}}).Find(&amp;users)<br />
// SELECT * FROM users WHERE name NOT IN (&quot;jinzhu&quot;, &quot;jinzhu 2&quot;);</p>

<p>// Struct<br />
db.Not(User{Name: &quot;jinzhu&quot;, Age: 18}).First(&amp;user)<br />
// SELECT * FROM users WHERE name &lt;&gt; &quot;jinzhu&quot; AND age &lt;&gt; 18 ORDER BY id LIMIT 1;</p>

<p>// 不在主键切片中的记录<br />
db.Not([]int64{1,2,3}).First(&amp;user)<br />
// SELECT * FROM users WHERE id NOT IN (1,2,3) ORDER BY id LIMIT 1;</p>

<p><strong>Or 条件</strong></p>

<p>db.Where(&quot;role = ?&quot;, &quot;admin&quot;).Or(&quot;role = ?&quot;, &quot;super_admin&quot;).Find(&amp;users)<br />
// SELECT * FROM users WHERE role = &#39;admin&#39; OR role = &#39;super_admin&#39;;</p>

<p>// Struct<br />
db.Where(&quot;name = &#39;jinzhu&#39;&quot;).Or(User{Name: &quot;jinzhu 2&quot;, Age: 18}).Find(&amp;users)<br />
// SELECT * FROM users WHERE name = &#39;jinzhu&#39; OR (name = &#39;jinzhu 2&#39; AND age = 18);</p>

<p>// Map<br />
db.Where(&quot;name = &#39;jinzhu&#39;&quot;).Or(map[string]interface{}{&quot;name&quot;: &quot;jinzhu 2&quot;, &quot;age&quot;: 18}).Find(&amp;users)<br />
// SELECT * FROM users WHERE name = &#39;jinzhu&#39; OR (name = &#39;jinzhu 2&#39; AND age = 18);</p>

<p>您还可以查看高级查询中的 <a href="https://learnku.com/docs/gorm/v2/advanced_query#group_conditions">分组条件</a>，它被用于编写复杂 SQL</p>

