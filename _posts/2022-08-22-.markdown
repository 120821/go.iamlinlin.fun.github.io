---
layout: post
title: "浏览器的同源策略"
date: "2022-08-22"
categories: 
---
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy</a></p>

<p><strong>同源策略</strong>是一个重要的安全策略，它用于限制一个<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Origin">origin</a>的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介</p>

<p>同源：如果两个 URL 的 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Protocol">protocol</a>、<a class="only-in-en-us" href="https://developer.mozilla.org/en-US/docs/Glossary/Port" title="Currently only available in English (US)">port <small>(en-US)</small></a> (如果有指定的话) 和 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Host">host</a> 都相同的话，则这两个 URL 是<em>同源</em>。这个方案也被称为&ldquo;协议/主机/端口元组&rdquo;，或者直接是 &ldquo;元组&rdquo;。（&ldquo;元组&rdquo; 是指一组项目构成的整体，双重/三重/四重/五重/等的通用形式）。</p>

<p><img height="483" src="/uploads/ckeditor/pictures/310/image-20220822085438-1.png" width="850" /></p>

<p>源的继承：</p>

<p>在页面中通过 {% highlight %}about:blank{% endhighlight %} 或 {% highlight %}javascript:{% endhighlight %} URL 执行的脚本会继承打开该 URL 的文档的源，因为这些类型的 URLs 没有包含源服务器的相关信息。</p>

<p>允许跨域访源：</p>

<p>可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">CORS</a> 来允许跨源访问。CORS 是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/HTTP">HTTP</a> 的一部分，它允许服务端来指定哪些主机可以从这个服务端加载资源。</p>

<p>阻止跨源访问：</p>

<div class="section-content">
<ul>
	<li>阻止跨源写操作，只要检测请求中的一个不可推测的标记 (CSRF token) 即可，这个标记被称为 <a class="external" href="https://owasp.org/www-community/attacks/csrf" rel=" noopener">Cross-Site Request Forgery (CSRF)</a> 标记。你必须使用这个标记来阻止页面的跨源读操作。</li>
	<li>阻止资源的跨源读取，需要保证该资源是不可嵌入的。阻止嵌入行为是必须的，因为嵌入资源通常向其暴露信息。</li>
	<li>阻止跨源嵌入，需要确保你的资源不能通过以上列出的可嵌入资源格式使用。浏览器可能不会遵守 {% highlight %}Content-Type{% endhighlight %} 头部定义的类型。例如，如果您在 HTML 文档中指定 {% highlight %}&lt;script&gt;{% endhighlight %} 标记，则浏览器将尝试将标签内部的 HTML 解析为 JavaScript。 当您的资源不是您网站的入口点时，您还可以使用 CSRF 令牌来防止嵌入。</li>
</ul>

<p>跨源脚本api访问：</p>

<div class="section-content">
<p>JavaScript 的 API 中，如 <a class="only-in-en-us" href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement" title="Currently only available in English (US)">iframe.contentWindow (en-US)</a>、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/parent">{% highlight %}window.parent{% endhighlight %}</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/open">{% highlight %}window.open{% endhighlight %}</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/opener">{% highlight %}window.opener{% endhighlight %}</a> 允许文档间直接相互引用。当两个文档的源不同时，这些引用方式将对 <a class="external" href="https://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#security-window" rel=" noopener">Window</a> 和 <a class="external" href="https://www.whatwg.org/specs/web-apps/current-work/multipage/history.html#security-location" rel=" noopener">Location</a>对象的访问添加限制，如下两节所述。</p>

<p>为了能让不同源中文档进行交流，可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage">{% highlight %}window.postMessage{% endhighlight %}</a>。</p>

<p>规范: <a class="external" href="https://html.spec.whatwg.org/multipage/browsers.html#cross-origin-objects" rel=" noopener">HTML Living Standard &sect; Cross-origin objects</a> 。</p>
</div>
</div>

