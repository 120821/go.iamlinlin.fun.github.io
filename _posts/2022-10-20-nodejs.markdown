---
layout: post
title: "nodejs传递参数"
date: "2022-10-20"
categories: 
---
<p><a href="http://www.manongjc.com/detail/21-cjbsvtxpwkisbhz.html">http://www.manongjc.com/detail/21-cjbsvtxpwkisbhz.html</a></p>

<p><a href="https://nodejs.org/en/knowledge/command-line/how-to-parse-command-line-arguments/">How to parse command line arguments</a></p>

<p>通过命令行传递参数是一项非常基本的编程任务，对于任何尝试编写简单命令行界面 (CLI) 的人来说都是必需的。&nbsp; 在 Node.js 中，与在 C 和许多相关环境中一样，shell 接收到的所有命令行参数都以名为 argv（&ldquo;参数值&rdquo;的缩写）的数组的形式提供给进程。</p>

<p>&nbsp;Node.js 以 process.argv 的形式为每个正在运行的进程公开这个数组&mdash;&mdash;让我们看一个例子。&nbsp; 创建一个名为 argv.js 的文件并添加以下行：</p>

<pre class="language-js">
<code class="language-js hljs javascript"><span class="hljs-built_in">console</span><span class="token punctuation">.<span class="token function">log<span class="token punctuation">(process<span class="token punctuation">.argv<span class="token punctuation">)<span class="token punctuation">;</span></span></span></span></span></span>{% endhighlight %}

<p><code>保存之后，在命令行运行：</code></p>

<pre class="language-bash">
<code class="language-bash hljs">node argv.js one two three four five
<span class="token punctuation">[ <span class="token string"><span class="hljs-string">&#39;node&#39;</span>,
  <span class="token string"><span class="hljs-string">&#39;/home/avian/argvdemo/argv.js&#39;</span>,
  <span class="token string"><span class="hljs-string">&#39;one&#39;</span>,
  <span class="token string"><span class="hljs-string">&#39;two&#39;</span>,
  <span class="token string"><span class="hljs-string">&#39;three&#39;</span>,
  <span class="token string"><span class="hljs-string">&#39;four&#39;</span>,
  <span class="token string"><span class="hljs-string">&#39;five&#39;</span> <span class="token punctuation">]</span></span></span></span></span></span></span></span></span>{% endhighlight %}

<p><font style="vertical-align:inherit">你有它 - 一个包含你传入的任何参数的数组。注意前两个元素 - </font><code>node</code><font style="vertical-align:inherit">以及脚本的路径。 这些将始终存在 - 即使您的程序没有自己的参数，您的脚本的解释器和路径仍然被视为您正在使用的 shell 的参数。 </font></p>

<p><font style="vertical-align:inherit">在涉及日常 CLI 参数的地方，您需要跳过前两个参数。 现在试试这个 </font><code>argv.js</code><font style="vertical-align:inherit">: </font></p>

<pre class="language-js">
<code class="language-js hljs javascript"><span class="token keyword"><span class="hljs-keyword">var</span> myArgs <span class="token operator">= process<span class="token punctuation">.argv<span class="token punctuation">.<span class="token function">slice<span class="token punctuation">(<span class="token number"><span class="hljs-number">2</span><span class="token punctuation">)<span class="token punctuation">;
<span class="hljs-built_in">console</span><span class="token punctuation">.<span class="token function">log<span class="token punctuation">(<span class="token string"><span class="hljs-string">&#39;myArgs: &#39;</span><span class="token punctuation">, myArgs<span class="token punctuation">)<span class="token punctuation">;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>{% endhighlight %}

<p>运行后：</p>

<pre class="language-bash">
<code class="language-bash hljs">node argv.js one two three four five
myArgs:  <span class="token punctuation">[ <span class="token string"><span class="hljs-string">&#39;one&#39;</span>, <span class="token string"><span class="hljs-string">&#39;two&#39;</span>, <span class="token string"><span class="hljs-string">&#39;three&#39;</span>, <span class="token string"><span class="hljs-string">&#39;four&#39;</span>, <span class="token string"><span class="hljs-string">&#39;five&#39;</span> <span class="token punctuation">]</span></span></span></span></span></span></span>{% endhighlight %}

<p><code class="language-bash hljs"><span class="token punctuation"><span class="token string"><span class="token string"><span class="token string"><span class="token string"><span class="token string"><span class="token punctuation">用args做一些实际的事情：</span></span></span></span></span></span></span></code></p>

<pre class="language-js">
<code class="language-js hljs javascript"><span class="token keyword"><span class="hljs-keyword">var</span> myArgs <span class="token operator">= process<span class="token punctuation">.argv<span class="token punctuation">.<span class="token function">slice<span class="token punctuation">(<span class="token number"><span class="hljs-number">2</span><span class="token punctuation">)<span class="token punctuation">;
<span class="hljs-built_in">console</span><span class="token punctuation">.<span class="token function">log<span class="token punctuation">(<span class="token string"><span class="hljs-string">&#39;myArgs: &#39;</span><span class="token punctuation">, myArgs<span class="token punctuation">)<span class="token punctuation">;

<span class="token keyword"><span class="hljs-keyword">switch</span> <span class="token punctuation">(myArgs<span class="token punctuation">[<span class="token number"><span class="hljs-number">0</span><span class="token punctuation">]<span class="token punctuation">) <span class="token punctuation">{
<span class="token keyword"><span class="hljs-keyword">case</span> <span class="token string"><span class="hljs-string">&#39;insult&#39;</span><span class="token operator">:
    <span class="hljs-built_in">console</span><span class="token punctuation">.<span class="token function">log<span class="token punctuation">(myArgs<span class="token punctuation">[<span class="token number"><span class="hljs-number">1</span><span class="token punctuation">]<span class="token punctuation">, <span class="token string"><span class="hljs-string">&#39;smells quite badly.&#39;</span><span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword"><span class="hljs-keyword">break</span><span class="token punctuation">;
<span class="token keyword"><span class="hljs-keyword">case</span> <span class="token string"><span class="hljs-string">&#39;compliment&#39;</span><span class="token operator">:
    <span class="hljs-built_in">console</span><span class="token punctuation">.<span class="token function">log<span class="token punctuation">(myArgs<span class="token punctuation">[<span class="token number"><span class="hljs-number">1</span><span class="token punctuation">]<span class="token punctuation">, <span class="token string"><span class="hljs-string">&#39;is really cool.&#39;</span><span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword"><span class="hljs-keyword">break</span><span class="token punctuation">;
<span class="token keyword"><span class="hljs-keyword">default</span><span class="token operator">:
    <span class="hljs-built_in">console</span><span class="token punctuation">.<span class="token function">log<span class="token punctuation">(<span class="token string"><span class="hljs-string">&#39;Sorry, that is not something I know how to do.&#39;</span><span class="token punctuation">)<span class="token punctuation">;
<span class="token punctuation">}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>{% endhighlight %}

<p><code class="language-js hljs javascript"><span class="token keyword"><span class="token operator"><span class="token punctuation"><span class="token punctuation"><span class="token function"><span class="token punctuation"><span class="token number"><span class="token punctuation"><span class="token punctuation"><span class="token punctuation"><span class="token function"><span class="token punctuation"><span class="token string"><span class="token punctuation"><span class="token punctuation"><span class="token punctuation"><span class="token keyword"><span class="token punctuation"><span class="token punctuation"><span class="token number"><span class="token punctuation"><span class="token punctuation"><span class="token punctuation"><span class="token keyword"><span class="token string"><span class="token operator"><span class="token punctuation"><span class="token function"><span class="token punctuation"><span class="token punctuation"><span class="token number"><span class="token punctuation"><span class="token punctuation"><span class="token string"><span class="token punctuation"><span class="token punctuation"><span class="token keyword"><span class="token punctuation"><span class="token keyword"><span class="token string"><span class="token operator"><span class="token punctuation"><span class="token function"><span class="token punctuation"><span class="token punctuation"><span class="token number"><span class="token punctuation"><span class="token punctuation"><span class="token string"><span class="token punctuation"><span class="token punctuation"><span class="token keyword"><span class="token punctuation"><span class="token keyword"><span class="token operator"><span class="token punctuation"><span class="token function"><span class="token punctuation"><span class="token string"><span class="token punctuation"><span class="token punctuation"><span class="token punctuation">停止后，可以继续运行</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></p>

<pre>
<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">console.log(process.argv);</span>
<span style="color: rgba(0, 0, 255, 1)">var</span> myArgs = process.argv.slice(2<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">console.log(&#39;myArgs: &#39;, myArgs);</span>
<span style="color: rgba(0, 0, 0, 1)">
const dateTime </span>= require(&#39;date-time&#39;<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> currentTime = dateTime({local: <span style="color: rgba(0, 0, 255, 1)">true</span>, showTimeZone: <span style="color: rgba(0, 0, 255, 1)">true</span>, showMilliseconds: <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">});
console.log(`${myArgs[</span>0]} at ${currentTime}`)</pre>

