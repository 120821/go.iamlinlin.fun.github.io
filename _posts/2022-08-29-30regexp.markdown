---
layout: post
title: "30分钟入门正则表达式(regexp)"
date: "2022-08-29"
categories: 
---
<p><a href="https://www.runoob.com/w3cnote/regular-expression-30-minutes-tutorial.html#mission">https://www.runoob.com/w3cnote/regular-expression-30-minutes-tutorial.html#mission</a></p>

<p><a href="https://stackoverflow.com/questions/559363/matching-a-space-in-regex">https://stackoverflow.com/questions/559363/matching-a-space-in-regex</a></p>

<p>正则表达式就是记录文本规则的代码。</p>

<p>几个很有用的元字符了，如<span class="code">\b</span>,<span class="code">.</span>,<span class="code">*</span>，还有<span class="code">\d</span>.正则表达式里还有更多的元字符，比如<span class="code">\s</span>匹配<span class="desc">任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格等</span>。<span class="code">\w</span>匹配<span class="desc">字母或数字或下划线或汉字等</span></p>

<p><span class="regex">\ba\w*\b</span>匹配<span class="desc">以字母<span class="part">a</span>开头的单词&mdash;&mdash;先是某个单词开始处(<span class="part">\b</span>)，然后是字母<span class="part">a</span>,然后是任意数量的字母或数字(<span class="part">\w*</span>)，最后是单词结束处(<span class="part">\b</span>)</span>。</p>

<p><span class="regex">\d+</span>匹配<span class="desc">1个或更多连续的数字</span>。这里的<span class="part">+</span>是和<span class="code">*</span>类似的元字符，不同的是<span class="code">*</span>匹配<span class="desc">重复任意次(可能是0次)</span>，而<span class="code">+</span>则匹配<span class="desc">重复1次或更多次</span>。</p>

<p><span class="regex">\b\w{6}\b</span> 匹配<span class="desc">刚好6个字符的单词</span>。</p>

{% highlight %}
{% highlight %}代码/语法说明
. 匹配除换行符以外的任意字符&nbsp;
\w 匹配字母或数字或下划线或汉字&nbsp;
\s 匹配任意的空白符&nbsp;
\d 匹配数字&nbsp;
\b 匹配单词的开始或结束&nbsp;
^ 匹配字符串的开始&nbsp;
$ 匹配字符串的结束&nbsp;

\a 报警字符(打印它的效果是电脑嘀一声)&nbsp;

\b 通常是单词分界位置，但如果在字符类里使用代表退格&nbsp;

\t 制表符，Tab&nbsp;

\r 回车&nbsp;

\v 竖向制表符&nbsp;

\f 换页符&nbsp;

\n 换行符&nbsp;

\e Escape&nbsp;

\0nn ASCII代码中八进制代码为nn的字符&nbsp;

\xnn ASCII代码中十六进制代码为nn的字符&nbsp;

\unnnn Unicode代码中十六进制代码为nnnn的字符&nbsp;

\cN ASCII控制字符。比如\cC代表Ctrl+C&nbsp;

\A 字符串开头(类似^，但不受处理多行选项的影响)&nbsp;

\Z 字符串结尾或行尾(不受处理多行选项的影响)&nbsp;

\z 字符串结尾(类似$，但不受处理多行选项的影响)&nbsp;

\G 当前搜索的开头&nbsp;

\p{name} Unicode中命名为name的字符类，例如\p{IsGreek}&nbsp;

(?&gt;exp) 贪婪子表达式&nbsp;

(?&lt;x&gt;-&lt;y&gt;exp) 平衡组&nbsp;

(?im-nsx:exp) 在子表达式exp中改变处理选项&nbsp;

(?im-nsx) 为表达式后面的部分改变处理选项&nbsp;

(?(exp)yes|no) 把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no&nbsp;

(?(exp)yes) 同上，只是使用空表达式作为no&nbsp;

(?(name)yes|no) 如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用no&nbsp;

(?(name)yes) 同上，只是使用空表达式作为no&nbsp;{% endhighlight %}
{% endhighlight %}

