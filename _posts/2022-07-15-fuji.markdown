---
layout: post
title: "创建智能合约 fuji网络"
date: "2022-07-15"
categories: 
---
<p>参考：</p>
<p>https://docs.avax.network/build/tutorials/platform/fuji-workflow/</p>
<p>1. 浏览器（firefox, chrome）安装metamask 扩展</p>
<p>2. 增加网络入口：</p>
<p>Avalanche Mainnet Settings:</p>
<p>Network Name: Avalanche Mainnet C-Chain<br />
New RPC URL: https://api.avax.network/ext/bc/C/rpc<br />
ChainID: 43114<br />
Symbol: AVAX<br />
Explorer: https://snowtrace.io/</p>
<p>FUJI Testnet Settings:</p>
<p>Network Name: Avalanche FUJI C-Chain<br />
New RPC URL: https://api.avax-test.network/ext/bc/C/rpc<br />
ChainID: 43113<br />
Symbol: AVAX<br />
Explorer: https://testnet.snowtrace.io/</p>
<p>3. 在metamask上增加好之后，切换到该网络</p>
<p>4. metamask 测试address</p>
<p>5. 打开 这个地址： https://faucet.avax-test.network/&nbsp; , 做一下人机校验，就可以填写收款地址了：</p>
<p><img height="688" src="/uploads/ckeditor/pictures/96/image-20220715145428-1.png" width="602" /></p>
<p>7. 打开： https://testnet.snowtrace.io/&nbsp; 输入对应的tx id ,</p>
<p>https://testnet.snowtrace.io/tx/0x5c5546ca305f5030d66f6a1655277d301faf9ce12672b11dd6179eb6c2690df8</p>
<p>可以看到对应的内容：</p>
<p>（注意，不要来这里 : https://explorer.avax-test.network/ 查不到的）</p>
<p>8创建智能合约</p>
<p>https://remix.ethereum.org/#optimize=false&amp;runs=200&amp;evmVersion=null&amp;version=soljson-v0.8.15+commit.e14f2714.js&amp;language=Solidity</p>
<p>编译，创建新文件hi.sol</p>
<p>内容如下</p>
{% highlight html %}
// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.15;
import &quot;@openzeppelin/contracts/token/ERC721/ERC721.sol&quot;;
import &quot;@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol&quot;;
import &quot;@openzeppelin/contracts/utils/Counters.sol&quot;;
import &quot;@openzeppelin/contracts/utils/Strings.sol&quot;;
contract CompleteNftExample is ERC721URIStorage {
/**
* contract creator 就是root 用户
*/
constructor() ERC721(&quot;CompleteNftExample&quot;, &quot;SSS&quot;) {
rootAddress = msg.sender;
}
// 已经发放的最新的NFT ID
uint256 private _currentId = 0;
// root用户的address
address public rootAddress = address(0);
// NFT的最大供应量
uint256 public _maxSupply = 100;
// 可以领取nft的地址白名单
mapping(address =&gt; uint) private whiteList;
event MintedEventLog(address to, uint256 nftId, address minter);
event AddToWhiteListEventLog(address the_address);
event RemoveFromWhiteListEventLog(address the_address);
// 必须是root 用户
modifier shouldBeRoot(){
string memory message = string.concat(&quot;The caller address(&quot;, toAsciiString(msg.sender), &quot;) is not the contract root.&quot;);
require( rootAddress == msg.sender, message);
_;
}
// 必须在地址白名单中
modifier shouldInWhiteList(address to){
string memory message = string.concat(&quot;This address( &quot;, toAsciiString(to), &quot; ) is not in white list&quot;);
require( whiteList[to] &gt; 0,  message);
_;
}
// 该NFT必须是可以领取的状态
modifier shouldLessThanMaxSupply(){
string memory message = string.concat(&quot;Reached max supply:(_maxSupply: &quot;, Strings.toString(_maxSupply), &quot;, _currentId: &quot;, Strings.toString(_currentId), &quot;), no available nft left&quot;);
require( _currentId &lt; _maxSupply, message);
_;
}
/**
* 挖nft, 参数：to 获得nft的地址
*/
function mint(address to) external shouldLessThanMaxSupply shouldInWhiteList(to) {
uint256 nftId = _currentId + 1;
_mint(to, nftId);
removeFromWhiteList(to);
_currentId = nftId;
address from = msg.sender;
emit MintedEventLog(to, nftId, from);
}
/**
* 确定一个地址是否在whiteList中。
* 0 ：不存在
* 3 : 可以领取3次
*/
function isInWhiteList(address theAddress) public view returns(uint){
return whiteList[theAddress];
}
/**
* 把多个地址放到whiteList 中
*/
function addToWhiteList(address[] calldata addresses) external shouldBeRoot {
for(uint i = 0; i &lt; addresses.length; i++ ) {
whiteList[addresses[i]] = whiteList[addresses[i]] + 1;
emit AddToWhiteListEventLog(addresses[i]);
}
}
/**
* 把1个address 的&ldquo;对应记录&rdquo;从 whitelist中删掉
*/
function removeFromWhiteList(address tempAddress) public {
if(whiteList[tempAddress] &gt; 0 ){
whiteList[tempAddress] = whiteList[tempAddress] - 1;
emit RemoveFromWhiteListEventLog(tempAddress);
}
}
/**
* 转换address -&gt; string
*/
function toAsciiString(address x) internal pure returns (string memory) {
bytes memory s = new bytes(40);
for (uint i = 0; i &lt; 20; i++) {
bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));
bytes1 hi = bytes1(uint8(b) / 16);
bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));
s[2*i] = char(hi);
s[2*i+1] = char(lo);
}
return string(s);
}
function char(bytes1 b) internal pure returns (bytes1 c) {
if (uint8(b) &lt; 10) return bytes1(uint8(b) + 0x30);
else return bytes1(uint8(b) + 0x57);
}
}
{% endhighlight %}
<p><img height="153" src="/uploads/ckeditor/pictures/97/image-20220715145643-2.png" width="490" /></p>
<p>这里是添加合约的名称和代币的名称，最多100个</p>
<p><img height="64" src="/uploads/ckeditor/pictures/98/image-20220715145732-3.png" width="333" /></p>
<p>点击进行编译</p>
<p><img height="644" src="/uploads/ckeditor/pictures/99/image-20220715145831-4.png" width="711" /></p>
<p>进行deploy</p>
<p><img height="530" src="/uploads/ckeditor/pictures/100/image-20220715145948-5.png" width="522" /></p>
<p>添加白名单</p>
<p><img height="377" src="/uploads/ckeditor/pictures/101/image-20220715150037-6.png" width="335" /></p>
<p>例如这样：[&quot;0x960781B058da688735c98D5165aF8FF4e1B400E0&quot;, &quot;0x0f8DA5C0b8ecdA1df8048f7B56aB94Efe1A5Dfa2&quot;, &quot;0x960781B058da688735c98D5165aF8FF4e1B400E0&quot;,&quot;0x960781B058da688735c98D5165aF8FF4e1B400E0&quot;,&quot;0x653799445f963236D70387A439d4739aeFFcAc88&quot;,&quot;0x6De3fB47EDd3b692024dbEDEB705A07C5DC351d1&quot;,<br />
&nbsp;&nbsp;&nbsp; &quot;0x6De3fB47EDd3b692024dbEDEB705A07C5DC351d1&quot;]</p>
<p>查看abi</p>
<p><img height="611" src="/uploads/ckeditor/pictures/102/image-20220715150200-7.png" width="396" /></p>
<p>查看contract address&nbsp; 0xbc61652e3Ec01e883c8AbF8b36E18576aB01A3a1</p>
<p><img height="643" src="/uploads/ckeditor/pictures/105/image-20220715150433-10.png" width="450" /></p>
<p>查看log</p>
<p><img height="474" src="/uploads/ckeditor/pictures/104/image-20220715150329-9.png" width="867" /></p>
<p>查看hash<img height="481" src="/uploads/ckeditor/pictures/103/image-20220715150312-8.png" width="1243" /><br />
&nbsp;&nbsp;&nbsp;</p>
