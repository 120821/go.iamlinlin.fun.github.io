---
layout: post
title: "linux - 常用命令 磁盘空间 文件处理 文本处理"
date: "2022-11-16"
categories: 
---
<p>参考：<a href="https://www.runoob.com/w3cnote/linux-common-command.html">https://www.runoob.com/w3cnote/linux-common-command.html</a></p>

<p>磁盘空间：</p>

<pre>
<code>df -h 显示已经挂载的分区列表
ls -lSr |more 以尺寸大小排列文件和目录
du -sh dir1 估算目录 &#39;dir1&#39; 已经使用的磁盘空间&#39;
du -sk * | sort -rn 以容量大小为依据依次显示文件和目录的大小
rpm -q -a --qf &#39;%10{SIZE}t%{NAME}n&#39; | sort -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)
dpkg-query -W -f=&#39;${Installed-Size;10}t${Package}n&#39; | sort -k1,1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统){% endhighlight %}

<p>文件和目录：</p>

<pre>
<code>cd /home 进入 &#39;/ home&#39; 目录&#39;
cd .. 返回上一级目录
cd ../.. 返回上两级目录
cd 进入个人的主目录
cd ~user1 进入个人的主目录
cd - 返回上次所在的目录
pwd 显示工作路径
ls 查看目录中的文件
ls -F 查看目录中的文件
ls -l 显示文件和目录的详细资料
ls -a 显示隐藏文件
ls *[0-9]* 显示包含数字的文件名和目录名
tree 显示文件和目录由根目录开始的树形结构(1)
lstree 显示文件和目录由根目录开始的树形结构(2)
mkdir dir1 创建一个叫做 &#39;dir1&#39; 的目录&#39;
mkdir dir1 dir2 同时创建两个目录
mkdir -p /tmp/dir1/dir2 创建一个目录树
rm -f file1 删除一个叫做 &#39;file1&#39; 的文件&#39;
rmdir dir1 删除一个叫做 &#39;dir1&#39; 的目录&#39;
rm -rf dir1 删除一个叫做 &#39;dir1&#39; 的目录并同时删除其内容
rm -rf dir1 dir2 同时删除两个目录及它们的内容
mv dir1 new_dir 重命名/移动 一个目录
cp file1 file2 复制一个文件
cp dir/* . 复制一个目录下的所有文件到当前工作目录
cp -a /tmp/dir1 . 复制一个目录到当前工作目录
cp -a dir1 dir2 复制一个目录
ln -s file1 lnk1 创建一个指向文件或目录的软链接
ln file1 lnk1 创建一个指向文件或目录的物理链接
touch -t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm)
file file1 outputs the mime type of the file as text
iconv -l 列出已知的编码
iconv -f fromEncoding -t toEncoding inputFile &gt; outputFile creates a new from the given input file by assuming it is encoded in fromEncoding and converting it to toEncoding.
find . -maxdepth 1 -name *.jpg -print -exec convert &quot;{}&quot; -resize 80x60 &quot;thumbs/{}&quot; \; batch resize files in the current directory and send them to a thumbnails directory (requires convert from Imagemagick){% endhighlight %}

<p>文件搜索：</p>

<pre>
<code>find / -name file1 从 &#39;/&#39; 开始进入根文件系统搜索文件和目录
find / -user user1 搜索属于用户 &#39;user1&#39; 的文件和目录
find /home/user1 -name \*.bin 在目录 &#39;/ home/user1&#39; 中搜索带有&#39;.bin&#39; 结尾的文件
find /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件
find /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件
find / -name \*.rpm -exec chmod 755 &#39;{}&#39; \; 搜索以 &#39;.rpm&#39; 结尾的文件并定义其权限
find / -xdev -name \*.rpm 搜索以 &#39;.rpm&#39; 结尾的文件，忽略光驱、捷盘等可移动设备
locate \*.ps 寻找以 &#39;.ps&#39; 结尾的文件 - 先运行 &#39;updatedb&#39; 命令
whereis halt 显示一个二进制文件、源码或man的位置
which halt 显示一个二进制文件或可执行文件的完整路径{% endhighlight %}

<p>打包和压缩：</p>

<pre>
<code>bunzip2 file1.bz2 解压一个叫做 &#39;file1.bz2&#39;的文件
bzip2 file1 压缩一个叫做 &#39;file1&#39; 的文件
gunzip file1.gz 解压一个叫做 &#39;file1.gz&#39;的文件
gzip file1 压缩一个叫做 &#39;file1&#39;的文件
gzip -9 file1 最大程度压缩
rar a file1.rar test_file 创建一个叫做 &#39;file1.rar&#39; 的包
rar a file1.rar file1 file2 dir1 同时压缩 &#39;file1&#39;, &#39;file2&#39; 以及目录 &#39;dir1&#39;
rar x file1.rar 解压rar包
unrar x file1.rar 解压rar包
tar -cvf archive.tar file1 创建一个非压缩的 tarball
tar -cvf archive.tar file1 file2 dir1 创建一个包含了 &#39;file1&#39;, &#39;file2&#39; 以及 &#39;dir1&#39;的档案文件
tar -tf archive.tar 显示一个包中的内容
tar -xvf archive.tar 释放一个包
tar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下
tar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包
tar -xvfj archive.tar.bz2 解压一个bzip2格式的压缩包
tar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包
tar -xvfz archive.tar.gz 解压一个gzip格式的压缩包
zip file1.zip file1 创建一个zip格式的压缩包
zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包
unzip file1.zip 解压一个zip格式压缩包{% endhighlight %}

<p>查看文件内容：</p>

<pre>
<code>cat file1 从第一个字节开始正向查看文件的内容
tac file1 从最后一行开始反向查看一个文件的内容
more file1 查看一个长文件的内容
less file1 类似于 &#39;more&#39; 命令，但是它允许在文件中和正向操作一样的反向操作
head -2 file1 查看一个文件的前两行
tail -2 file1 查看一个文件的最后两行
tail -f /var/log/messages 实时查看被添加到一个文件中的内容{% endhighlight %}

<p>文本处理：</p>

<pre>
<code>cat file1 file2 ... | command &lt;&gt; file1_in.txt_or_file1_out.txt general syntax for text manipulation using PIPE, STDIN and STDOUT
cat file1 | command( sed, grep, awk, grep, etc...) &gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中
cat file1 | command( sed, grep, awk, grep, etc...) &gt;&gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中
grep Aug /var/log/messages 在文件 &#39;/var/log/messages&#39;中查找关键词&quot;Aug&quot;
grep ^Aug /var/log/messages 在文件 &#39;/var/log/messages&#39;中查找以&quot;Aug&quot;开始的词汇
grep [0-9] /var/log/messages 选择 &#39;/var/log/messages&#39; 文件中所有包含数字的行
grep Aug -R /var/log/* 在目录 &#39;/var/log&#39; 及随后的目录中搜索字符串&quot;Aug&quot;
sed &#39;s/stringa1/stringa2/g&#39; example.txt 将example.txt文件中的 &quot;string1&quot; 替换成 &quot;string2&quot;
sed &#39;/^$/d&#39; example.txt 从example.txt文件中删除所有空白行
sed &#39;/ *#/d; /^$/d&#39; example.txt 从example.txt文件中删除所有注释和空白行
echo &#39;esempio&#39; | tr &#39;[:lower:]&#39; &#39;[:upper:]&#39; 合并上下单元格内容
sed -e &#39;1d&#39; result.txt 从文件example.txt 中排除第一行
sed -n &#39;/stringa1/p&#39; 查看只包含词汇 &quot;string1&quot;的行
sed -e &#39;s/ *$//&#39; example.txt 删除每一行最后的空白字符
sed -e &#39;s/stringa1//g&#39; example.txt 从文档中只删除词汇 &quot;string1&quot; 并保留剩余全部
sed -n &#39;1,5p;5q&#39; example.txt 查看从第一行到第5行内容
sed -n &#39;5p;5q&#39; example.txt 查看第5行
sed -e &#39;s/00*/0/g&#39; example.txt 用单个零替换多个零
cat -n file1 标示文件的行数
cat example.txt | awk &#39;NR%2==1&#39; 删除example.txt文件中的所有偶数行
echo a b c | awk &#39;{print $1}&#39; 查看一行第一栏
echo a b c | awk &#39;{print $1,$3}&#39; 查看一行的第一和第三栏
paste file1 file2 合并两个文件或两栏的内容
paste -d &#39;+&#39; file1 file2 合并两个文件或两栏的内容，中间用&quot;+&quot;区分
sort file1 file2 排序两个文件的内容
sort file1 file2 | uniq 取出两个文件的并集(重复的行只保留一份)
sort file1 file2 | uniq -u 删除交集，留下其他的行
sort file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件)
comm -1 file1 file2 比较两个文件的内容只删除 &#39;file1&#39; 所包含的内容
comm -2 file1 file2 比较两个文件的内容只删除 &#39;file2&#39; 所包含的内容
comm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分{% endhighlight %}

<p>备份：</p>

<pre>
<code>dump -0aj -f /tmp/home0.bak /home 制作一个 &#39;/home&#39; 目录的完整备份
dump -1aj -f /tmp/home0.bak /home 制作一个 &#39;/home&#39; 目录的交互式备份
restore -if /tmp/home0.bak 还原一个交互式备份
rsync -rogpav --delete /home /tmp 同步两边的目录
rsync -rogpav -e ssh --delete /home ip_address:/tmp 通过SSH通道rsync
rsync -az -e ssh --delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录
rsync -az -e ssh --delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录
dd bs=1M if=/dev/hda | gzip | ssh user@ip_addr &#39;dd of=hda.gz&#39; 通过ssh在远程主机上执行一次备份本地磁盘的操作
dd if=/dev/sda of=/tmp/file1 备份磁盘内容到一个文件
tar -Puf backup.tar /home/user 执行一次对 &#39;/home/user&#39; 目录的交互式备份操作
( cd /tmp/local/ &amp;&amp; tar c . ) | ssh -C user@ip_addr &#39;cd /home/share/ &amp;&amp; tar x -p&#39; 通过ssh在远程目录中复制一个目录内容
( tar c /home ) | ssh -C user@ip_addr &#39;cd /home/backup-home &amp;&amp; tar x -p&#39; 通过ssh在远程目录中复制一个本地目录
tar cf - . | (cd /tmp/backup ; tar xf - ) 本地将一个目录复制到另一个地方，保留原有权限及链接
find /home/user1 -name &#39;*.txt&#39; | xargs cp -av --target-directory=/home/backup/ --parents 从一个目录查找并复制所有以 &#39;.txt&#39; 结尾的文件到另一个目录
find /var/log -name &#39;*.log&#39; | tar cv --files-from=- | bzip2 &gt; log.tar.bz2 查找所有以 &#39;.log&#39; 结尾的文件并做成一个bzip包
dd if=/dev/hda of=/dev/fd0 bs=512 count=1 做一个将 MBR (Master Boot Record)内容复制到软盘的动作
dd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容{% endhighlight %}

<p>&nbsp;</p>

