---
layout: post
title: "solidity--发送以太币（转账、发送、调用） "
date: "2022-07-21"
categories: 
---
<p>https://solidity-by-example.org/sending-ether/</p>
<p id="how-to-send-ether">How to send Ether?</p>
<p>You can send Ether to other contracts by</p>
<ul>
<li>
<p>{% highlight html %}transfer{% endhighlight %} (2300 gas, throws error)</p>
</li>
<li>
<p>{% highlight html %}send{% endhighlight %} (2300 gas, returns bool)</p>
</li>
<li>
<p>{% highlight html %}call{% endhighlight %} (forward all gas or set gas, returns bool)</p>
</li>
</ul>
<p id="how-to-receive-ether">How to receive Ether?</p>
<p>A contract receiving Ether must have at least one of the functions below</p>
<ul>
<li>
<p>{% highlight html %}receive() external payable{% endhighlight %}</p>
</li>
<li>
<p>{% highlight html %}fallback() external payable{% endhighlight %}</p>
</li>
</ul>
<p>{% highlight html %}receive(){% endhighlight %} is called if {% highlight html %}msg.data{% endhighlight %} is empty, otherwise {% highlight html %}fallback(){% endhighlight %} is called.</p>
<p id="which-method-should-you-use">Which method should you use?</p>
<p>{% highlight html %}call{% endhighlight %} in combination with re-entrancy guard is the recommended method to use after December 2019.</p>
<p>Guard against re-entrancy by</p>
<ul>
<li>
<p>making all state changes before calling other contracts</p>
</li>
<li>
<p>using re-entrancy guard modifier</p>
</li>
</ul>
<p id="how-to-send-ether"><font style="vertical-align:inherit">如何发送以太币？ </font></p>
<p><font style="vertical-align:inherit">您可以通过以下方式将以太币发送到其他合约 </font></p>
<ul>
<li>{% highlight html %}transfer{% endhighlight %}<font style="vertical-align:inherit">（2300 gas，抛出错误） </font></li>
<li>{% highlight html %}send{% endhighlight %}<font style="vertical-align:inherit">（2300 气体，返回布尔值） </font></li>
<li>{% highlight html %}call{% endhighlight %}<font style="vertical-align:inherit">（转发所有气体或设置气体，返回布尔值） </font></li>
</ul>
<p id="how-to-receive-ether"><font style="vertical-align:inherit">如何接收以太币？ </font></p>
<p><font style="vertical-align:inherit">接收 Ether 的合约必须至少具有以下功能之一 </font></p>
<ul>
<li>{% highlight html %}receive() external payable{% endhighlight %}</li>
<li>{% highlight html %}fallback() external payable{% endhighlight %}</li>
</ul>
<p>{% highlight html %}receive(){% endhighlight %}<font style="vertical-align:inherit">被称为如果 </font>{% highlight html %}msg.data{% endhighlight %}<font style="vertical-align:inherit">为空，否则 </font>{% highlight html %}fallback(){% endhighlight %}<font style="vertical-align:inherit">叫做。 </font></p>
<p id="which-method-should-you-use"><font style="vertical-align:inherit">您应该使用哪种方法？ </font></p>
<p>{% highlight html %}call{% endhighlight %}<font style="vertical-align:inherit">2019 年 12 月后推荐使用与重入防护结合使用的方法。 </font></p>
<p><font style="vertical-align:inherit">通过以下方式防止重新进入 </font></p>
<ul>
<li>
<p><font style="vertical-align:inherit">在调用其他合约之前进行所有状态更改 </font></p>
</li>
<li>
<p><font style="vertical-align:inherit">使用重入保护修饰符 </font></p>
</li>
</ul>
{% highlight html %}
<code class="language-solidity"><span class="hljs-comment">// SPDX-License-Identifier: MIT</span>
<span class="hljs-meta"><span class="hljs-keyword">pragma</span> <span class="hljs-keyword">solidity</span> ^0.8.13;</span>
<span class="hljs-class"><span class="hljs-keyword">contract</span> <span class="hljs-title">ReceiveEther</span> </span>{
<span class="hljs-comment">/*
Which function is called, fallback() or receive()?
send Ether
|
msg.data is empty?
/ \
yes  no
/     \
receive() exists?  fallback()
/   \
yes   no
/      \
receive()   fallback()
*/</span>
<span class="hljs-comment">// Function to receive Ether. msg.data must be empty</span>
<span class="hljs-function"><span class="hljs-keyword">receive</span>() <span class="hljs-title"><span class="hljs-keyword">external</span></span> <span class="hljs-title"><span class="hljs-keyword">payable</span></span> </span>{}
<span class="hljs-comment">// Fallback function is called when msg.data is not empty</span>
<span class="hljs-function"><span class="hljs-keyword">fallback</span>() <span class="hljs-title"><span class="hljs-keyword">external</span></span> <span class="hljs-title"><span class="hljs-keyword">payable</span></span> </span>{}
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBalance</span>() <span class="hljs-title"><span class="hljs-keyword">public</span></span> <span class="hljs-title"><span class="hljs-keyword">view</span></span> <span class="hljs-title"><span class="hljs-keyword">returns</span></span> (<span class="hljs-params"><span class="hljs-keyword">uint</span></span>) </span>{
<span class="hljs-keyword">return</span> <span class="hljs-keyword">address</span>(<span class="hljs-built_in">this</span>).<span class="hljs-built_in">balance</span>;
}
}
<span class="hljs-class"><span class="hljs-keyword">contract</span> <span class="hljs-title">SendEther</span> </span>{
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sendViaTransfer</span>(<span class="hljs-params"><span class="hljs-keyword">address</span> <span class="hljs-keyword">payable</span> _to</span>) <span class="hljs-title"><span class="hljs-keyword">public</span></span> <span class="hljs-title"><span class="hljs-keyword">payable</span></span> </span>{
<span class="hljs-comment">// This function is no longer recommended for sending Ether.</span>
_to.<span class="hljs-built_in">transfer</span>(<span class="hljs-built_in">msg</span>.<span class="hljs-built_in">value</span>);
}
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sendViaSend</span>(<span class="hljs-params"><span class="hljs-keyword">address</span> <span class="hljs-keyword">payable</span> _to</span>) <span class="hljs-title"><span class="hljs-keyword">public</span></span> <span class="hljs-title"><span class="hljs-keyword">payable</span></span> </span>{
<span class="hljs-comment">// Send returns a boolean value indicating success or failure.</span>
<span class="hljs-comment">// This function is not recommended for sending Ether.</span>
<span class="hljs-keyword">bool</span> sent <span class="hljs-operator">=</span> _to.<span class="hljs-built_in">send</span>(<span class="hljs-built_in">msg</span>.<span class="hljs-built_in">value</span>);
<span class="hljs-built_in">require</span>(sent, <span class="hljs-string">&quot;Failed to send Ether&quot;</span>);
}
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sendViaCall</span>(<span class="hljs-params"><span class="hljs-keyword">address</span> <span class="hljs-keyword">payable</span> _to</span>) <span class="hljs-title"><span class="hljs-keyword">public</span></span> <span class="hljs-title"><span class="hljs-keyword">payable</span></span> </span>{
<span class="hljs-comment">// Call returns a boolean value indicating success or failure.</span>
<span class="hljs-comment">// This is the current recommended method to use.</span>
(<span class="hljs-keyword">bool</span> sent, <span class="hljs-keyword">bytes</span> <span class="hljs-keyword">memory</span> data) <span class="hljs-operator">=</span> _to.<span class="hljs-built_in">call</span>{<span class="hljs-built_in">value</span>: <span class="hljs-built_in">msg</span>.<span class="hljs-built_in">value</span>}(<span class="hljs-string">&quot;&quot;</span>);
<span class="hljs-built_in">require</span>(sent, <span class="hljs-string">&quot;Failed to send Ether&quot;</span>);
}
}{% endhighlight %}
