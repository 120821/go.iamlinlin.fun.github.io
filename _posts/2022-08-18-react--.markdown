---
layout: post
title: "认识 React--#字棋"
date: "2022-08-18"
categories: 
---
<p><a href="https://zh-hans.reactjs.org/">官网</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="https://zh-hans.reactjs.org/tutorial/tutorial.html#overview">入门 </a></p>

<div class="gatsby-highlight" data-language="bash">
<pre class="gatsby-code-bash">
<code class="gatsby-code-bash"><span class="token builtin class-name">cd</span> my-app
<span class="token builtin class-name">cd</span> src
<span class="token comment"># 如果你使用 Mac 或 Linux:</span>
<span class="token function">rm</span> -f *
<span class="token comment"># 如果你使用 Windows:</span>
del *
<span class="token comment"># 然后回到项目文件夹</span>
<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span></code></pre>

<p><img height="159" src="/uploads/ckeditor/pictures/276/image-20220818142354-1.png" width="1080" /></p>

<p>在 <code class="gatsby-code-text">src/</code> 文件夹中创建一个名为 <code class="gatsby-code-text">index.css</code> 的文件，并拷贝<a href="https://codepen.io/gaearon/pen/oWWQNa?editors=0100" rel="nofollow noopener noreferrer" target="_blank">这些 CSS 代码</a>。</p>

<p>在 <code class="gatsby-code-text">src/</code> 文件夹下创建一个名为 <code class="gatsby-code-text">index.js</code> 的文件，并拷贝<a href="https://codepen.io/gaearon/pen/oWWQNa?editors=0010" rel="nofollow noopener noreferrer" target="_blank">这些 JS 代码</a></p>

<p>拷贝以下三行代码到 <code class="gatsby-code-text">src/</code> 文件夹下的 <code class="gatsby-code-text">index.js</code> 文件的顶部</p>

<p>在项目文件夹下执行 <code class="gatsby-code-text">npm start</code> 命令，然后在浏览器访问 <code class="gatsby-code-text">http://localhost:3000</code>。这样你就可以在浏览器中看见一个空的井字棋的棋盘了（一定要重新启动）</p>

<p><img height="206" src="/uploads/ckeditor/pictures/277/image-20220818142802-2.png" width="484" /></p>

<p>通过阅读代码index.js，可以看到我们有三个 React 组件：</p>

<ul>
	<li>Square</li>
	<li>Board</li>
	<li>Game</li>
</ul>

<p>Square 组件渲染了一个单独的 <code class="gatsby-code-text">&lt;button&gt;</code>。Board 组件渲染了 9 个方块。Game 组件渲染了含有默认值的一个棋盘，我们一会儿会修改这些值。到目前为止还没有可以交互的组件。</p>

<p id="passing-data-through-props">通过 Props 传递数据</p>

<p>在 Board 组件的 <code class="gatsby-code-text">renderSquare</code> 方法中，我们将代码改写成下面这样，传递一个名为 <code class="gatsby-code-text">value</code> 的 prop 到 Square 当中：</p>

<div class="gatsby-highlight has-highlighted-lines" data-language="jsx">
<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">Board</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="gatsby-highlight-code-line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Square</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>

<p>修改 Square 组件中的 <code class="gatsby-code-text">render</code> 方法，把 <code class="gatsby-code-text">{/* TODO */}</code> 替换为 <code class="gatsby-code-text">{this.props.value}</code>，以显示上文中传入的值：</p>

<div class="gatsby-highlight has-highlighted-lines" data-language="jsx">
<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>square<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="gatsby-highlight-code-line"><span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>

<p><code>可以看到发生变化：(</code>成功地把一个 prop 从父组件 Board &ldquo;传递&rdquo;给了子组件 Square。在 React 应用中，数据通过 props 的传递，从父组件流向子组件<code>)</code></p>

<p><img height="215" src="/uploads/ckeditor/pictures/278/image-20220818143541-3.png" width="449" /></p>

<p id="making-an-interactive-component">给组件添加交互功能</p>

<p>接下来我们试着让棋盘的每一个格子在点击之后能落下一颗 &ldquo;X&rdquo; 作为棋子。 首先，我们把 Square 组件中 <code class="gatsby-code-text">render()</code> 方法的返回值中的 button 标签修改为如下内容：</p>

<div class="gatsby-highlight has-highlighted-lines" data-language="jsx">
<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
<span class="gatsby-highlight-code-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>square<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span></span><span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token punctuation">}</span>
<span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>

<p>如果此刻点击某个格子，将在浏览器的开发者工具中打印 &lsquo;click<img height="162" src="/uploads/ckeditor/pictures/279/image-20220818143838-4.png" width="799" /></p>

<p>为了少输入代码，同时为了避免 <a href="https://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/" rel="nofollow noopener noreferrer" target="_blank"><code class="gatsby-code-text">this</code> 造成的困扰</a>，我们在这里使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" rel="nofollow noopener noreferrer" target="_blank">箭头函数</a> 来进行事件处理，如下所示</p>

<div class="gatsby-highlight has-highlighted-lines" data-language="jsx">
<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
 <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span>
<span class="gatsby-highlight-code-line">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>square<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span></span><span class="token plain-text">       </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token punctuation">}</span>
<span class="token plain-text">     </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
   <span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>

<p><img height="179" src="/uploads/ckeditor/pictures/280/image-20220818144031-5.png" width="1191" /></p>

<p>此处使用了 <code class="gatsby-code-text">onClick={() =&gt; console.log(&#39;click&#39;)}</code> 的方式向 <code class="gatsby-code-text">onClick</code> 这个 prop 传入一个<em>函数</em>。 React 将在单击时调用此函数。但很多人经常忘记编写 <code class="gatsby-code-text">() =&gt;</code>，而写成了 <code class="gatsby-code-text">onClick={console.log(&#39;click&#39;)}</code>，这种常见的错误会导致每次这个组件渲染的时候都会触发控制台输出。</p>

<p>&nbsp;</p>

<p>接下来，我们希望 Square 组件可以&ldquo;记住&rdquo;它被点击过，然后用 &ldquo;X&rdquo; 来填充对应的方格。我们用 <strong>state</strong> 来实现所谓&ldquo;记忆&rdquo;的功能。</p>

<p>可以通过在 React 组件的构造函数中设置 <code class="gatsby-code-text">this.state</code> 来初始化 state。<code class="gatsby-code-text">this.state</code> 应该被视为一个组件的私有属性。我们在 <code class="gatsby-code-text">this.state</code> 中存储当前每个方格（Square）的值，并且在每次方格被点击的时候改变这个值。</p>

<p>首先，我们向这个 class 中添加一个构造函数，用来初始化 state：</p>

<div class="gatsby-highlight has-highlighted-lines" data-language="jsx">
<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
<span class="gatsby-highlight-code-line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="gatsby-highlight-code-line">    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span></span><span class="gatsby-highlight-code-line">      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span><span class="gatsby-highlight-code-line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">  <span class="token punctuation">}</span></span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>square<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token punctuation">}</span>
<span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>

<p>在 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" rel="nofollow noopener noreferrer" target="_blank">JavaScript class</a> 中，每次你定义其子类的构造函数时，都需要调用 <code class="gatsby-code-text">super</code> 方法。因此，在所有含有构造函数的的 React 组件中，构造函数必须以 <code class="gatsby-code-text">super(props)</code> 开头。</p>

<p>现在，我们来修改一下 Square 组件的 <code class="gatsby-code-text">render</code> 方法，这样，每当方格被点击的时候，就可以显示当前 state 的值了：</p>

<ul>
	<li>在 <code class="gatsby-code-text">&lt;button&gt;</code> 标签中，把 <code class="gatsby-code-text">this.props.value</code> 替换为 <code class="gatsby-code-text">this.state.value</code>。</li>
	<li>将 <code class="gatsby-code-text">onClick={...}</code> 事件监听函数替换为 <code class="gatsby-code-text">onClick={() =&gt; this.setState({value: &#39;X&#39;})}</code>。</li>
	<li>为了更好的可读性，将 <code class="gatsby-code-text">className</code> 和 <code class="gatsby-code-text">onClick</code> 的 prop 分两行书写。</li>
</ul>

<p>修改之后，Square 组件中 <code class="gatsby-code-text">render</code> 方法的返回值中的 <code class="gatsby-code-text">&lt;button&gt;</code> 标签就变成了下面这样：</p>

<div class="gatsby-highlight has-highlighted-lines" data-language="jsx">
<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
<span class="gatsby-highlight-code-line">        <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>square<span class="token punctuation">&quot;</span></span></span><span class="gatsby-highlight-code-line">        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;X&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>      <span class="token punctuation">&gt;</span></span>
<span class="gatsby-highlight-code-line"><span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>

<p>在 Square 组件 <code class="gatsby-code-text">render</code> 方法中的 <code class="gatsby-code-text">onClick</code> 事件监听函数中调用 <code class="gatsby-code-text">this.setState</code>，我们就可以在每次 <code class="gatsby-code-text">&lt;button&gt;</code> 被点击的时候通知 React 去重新渲染 Square 组件。组件更新之后，Square 组件的 <code class="gatsby-code-text">this.state.value</code> 的值会变为 <code class="gatsby-code-text">&#39;X&#39;</code>，因此，我们在游戏棋盘上就能看见 <code class="gatsby-code-text">X</code> 了。点击任意一个方格，<code class="gatsby-code-text">X</code> 就会出现了。</p>

<p>每次在组件中调用 <code class="gatsby-code-text">setState</code> 时，React 都会自动更新其子组件</p>

<p>为 Board 组件添加构造函数，将 Board 组件的初始状态设置为长度为 9 的空值数组：</p>

<div class="gatsby-highlight has-highlighted-lines" data-language="jsx">
<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">Board</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
<span class="gatsby-highlight-code-line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="gatsby-highlight-code-line">    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span></span><span class="gatsby-highlight-code-line">      <span class="token literal-property property">squares</span><span class="token operator">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="gatsby-highlight-code-line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">  <span class="token punctuation">}</span></span>
  <span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Square</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>

<p>当我们填充棋盘后，<code class="gatsby-code-text">this.state.squares</code> 数组的值可能如下所示：</p>

<div class="gatsby-highlight" data-language="jsx">
<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="token punctuation">[</span>
  <span class="token string">&#39;O&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;X&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;X&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;X&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;O&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;O&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span></code></pre>

<p>Board 组件当前的 <code class="gatsby-code-text">renderSquare</code> 方法看起来像下面这样：</p>

<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"> <span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Square</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>

<p>让我们再一次使用 prop 的传递机制。我们通过修改 Board 来指示每一个 Square 的当前值（<code class="gatsby-code-text">&#39;X&#39;</code>, <code class="gatsby-code-text">&#39;O&#39;</code>, 或者 <code class="gatsby-code-text">null</code>）。我们在 Board 的构造函数中已经定义好了 <code class="gatsby-code-text">squares</code> 数组，这样，我们就可以通过修改 Board 的 <code class="gatsby-code-text">renderSquare</code> 方法来读取这些值了。</p>

<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="gatsby-highlight-code-line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Square</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>squares<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>  <span class="token punctuation">}</span></code></pre>
</div>
</div>

<p>这样，每个 Square 就都能接收到一个 <code class="gatsby-code-text">value</code> prop 了，这个 prop 的值可以是 <code class="gatsby-code-text">&#39;X&#39;</code>、 <code class="gatsby-code-text">&#39;O&#39;</code>、 或 <code class="gatsby-code-text">null</code>（<code class="gatsby-code-text">null</code> 代表空方格）。</p>

<p>接下来，我们要修改一下 Square 的点击事件监听函数。Board 组件当前维护了那些已经被填充了的方格。我们需要想办法让 Square 去更新 Board 的 state。由于 state 对于每个组件来说是私有的，因此我们不能直接通过 Square 来更新 Board 的 state。</p>

<p>相反，从 Board 组件向 Square 组件传递一个函数，当 Square 被点击的时候，这个函数就会被调用。接着，我们将 Board 组件的 <code class="gatsby-code-text">renderSquare</code> 方法改写为如下效果：</p>

<p>renderSquare(i) {<br />
&nbsp;&nbsp;&nbsp; return (<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Square<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value={this.state.squares[i]}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; onClick={() =&gt; this.handleClick(i)}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&gt;<br />
&nbsp;&nbsp;&nbsp; );<br />
&nbsp; }</p>

<p>为了提高可读性，我们把返回的 React 元素拆分成了多行，同时在最外层加了小括号，这样 JavaScript 解析的时候就不会在 <code class="gatsby-code-text">return</code> 的后面自动插入一个分号从而破坏代码结构了。</p>

<p>现在我们从 Board 组件向 Square 组件中传递两个 props 参数：<code class="gatsby-code-text">value</code> 和 <code class="gatsby-code-text">onClick</code>。<code class="gatsby-code-text">onClick</code> prop 是一个 Square 组件点击事件监听函数。接下来，我们需要修改 Square 的代码：</p>

<ul>
	<li>将 Square 组件的 <code class="gatsby-code-text">render</code> 方法中的 <code class="gatsby-code-text">this.state.value</code> 替换为 <code class="gatsby-code-text">this.props.value</code> 。</li>
	<li>将 Square 组件的 <code class="gatsby-code-text">render</code> 方法中的 <code class="gatsby-code-text">this.setState()</code> 替换为 <code class="gatsby-code-text">this.props.onClick()</code> 。</li>
	<li>删掉 Square 组件中的构造函数 <code class="gatsby-code-text">constructor</code>，因为该组件不需要再保存游戏的 state。</li>
</ul>

<p>进行上述修改之后，代码会变成下面这样:</p>

<div class="gatsby-highlight has-highlighted-lines" data-language="jsx">
<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="gatsby-highlight-code-line"><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span><span class="gatsby-highlight-code-line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
        <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>square<span class="token punctuation">&quot;</span></span>
<span class="gatsby-highlight-code-line">        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>      <span class="token punctuation">&gt;</span></span>
<span class="gatsby-highlight-code-line"><span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>

<p>每一个 Square 被点击时，Board 提供的 <code class="gatsby-code-text">onClick</code> 函数就会触发。我们回顾一下这是怎么实现的：</p>

<ol>
	<li>向 DOM 内置元素 <code class="gatsby-code-text">&lt;button&gt;</code> 添加 <code class="gatsby-code-text">onClick</code> prop，让 React 开启对点击事件的监听。</li>
	<li>当 button 被点击时，React 会调用 Square 组件的 <code class="gatsby-code-text">render()</code> 方法中的 <code class="gatsby-code-text">onClick</code> 事件处理函数。</li>
	<li>事件处理函数触发了传入其中的 <code class="gatsby-code-text">this.props.onClick()</code> 方法。这个方法是由 Board 传递给 Square 的。</li>
	<li>由于 Board 把 <code class="gatsby-code-text">onClick={() =&gt; this.handleClick(i)}</code> 传递给了 Square，所以当 Square 中的事件处理函数触发时，其实就是触发的 Board 当中的 <code class="gatsby-code-text">handleClick(i)</code> 方法。</li>
	<li>现在我们还尚未定义 <code class="gatsby-code-text">handleClick()</code> 方法，所以代码还不能正常工作。如果此时点击 Square，你会在屏幕上看到红色的错误提示，提示内容为：&ldquo;this.handleClick is not a function&rdquo;。</li>
</ol>

<p>因为 DOM 元素 <code class="gatsby-code-text">&lt;button&gt;</code> 是一个内置组件，因此其 <code class="gatsby-code-text">onClick</code> 属性在 React 中有特殊的含义。而对于用户自定义的组件来说，命名就可以由用户自己来定义了。我们给 Square 的 <code class="gatsby-code-text">onClick</code> 和 Board 的 <code class="gatsby-code-text">handleClick</code> 赋予任意的名称，代码依旧有效。在 React 中，有一个命名规范，通常会将代表事件的监听 prop 命名为 <code class="gatsby-code-text">on[Event]</code>，将处理事件的监听方法命名为 <code class="gatsby-code-text">handle[Event]</code> 这样的格式。</p>

<p>这时候我们点击 Square 的时候，浏览器会报错，因为我们还没有定义 <code class="gatsby-code-text">handleClick</code> 方法。我们现在来向 Board 里添加 <code class="gatsby-code-text">handleClick</code> 方法：</p>

<p>class Board extends React.Component {<br />
&nbsp; constructor(props) {<br />
&nbsp;&nbsp;&nbsp; super(props);<br />
&nbsp;&nbsp;&nbsp; this.state = {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; squares: Array(9).fill(null),<br />
&nbsp;&nbsp;&nbsp; };<br />
&nbsp; }</p>

<p>&nbsp; handleClick(i) {&nbsp;&nbsp;&nbsp; const squares = this.state.squares.slice();&nbsp;&nbsp;&nbsp; squares[i] = &#39;X&#39;;&nbsp;&nbsp;&nbsp; this.setState({squares: squares});&nbsp; }<br />
&nbsp; renderSquare(i) {<br />
&nbsp;&nbsp;&nbsp; return (<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Square<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value={this.state.squares[i]}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; onClick={() =&gt; this.handleClick(i)}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&gt;<br />
&nbsp;&nbsp;&nbsp; );<br />
&nbsp; }</p>

<p>&nbsp; render() {<br />
&nbsp;&nbsp;&nbsp; const status = &#39;Next player: X&#39;;</p>

<p>&nbsp;&nbsp;&nbsp; return (<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;div&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;div className=&quot;status&quot;&gt;{status}&lt;/div&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;div className=&quot;board-row&quot;&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {this.renderSquare(0)}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {this.renderSquare(1)}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {this.renderSquare(2)}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/div&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;div className=&quot;board-row&quot;&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {this.renderSquare(3)}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {this.renderSquare(4)}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {this.renderSquare(5)}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/div&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;div className=&quot;board-row&quot;&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {this.renderSquare(6)}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {this.renderSquare(7)}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {this.renderSquare(8)}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/div&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/div&gt;<br />
&nbsp;&nbsp;&nbsp; );<br />
&nbsp; }<br />
}</p>

<p>现在，我们可以通过点击 Square 来填充那些方格，效果与之前相同。但是，当前 state 没有保存在单个的 Square 组件中，而是保存在了 Board 组件中。每当 Board 的 state 发生变化的时候，这些 Square 组件都会重新渲染一次。把所有 Square 的 state 保存在 Board 组件中可以让我们在将来判断出游戏的胜者。</p>

<p>因为 Square 组件不再持有 state，因此每次它们被点击的时候，Square 组件就会从 Board 组件中接收值，并且通知 Board 组件。在 React 术语中，我们把目前的 Square 组件称做&ldquo;受控组件&rdquo;。在这种情况下，Board 组件完全控制了 Square 组件。</p>

<p>注意，我们调用了 <code class="gatsby-code-text">.slice()</code> 方法创建了 <code class="gatsby-code-text">squares</code> 数组的一个副本，而不是直接在现有的数组上进行修改。在下一节，我们会介绍为什么我们需要创建 <code class="gatsby-code-text">square</code> 数组的副本</p>

<p>一般来说，有两种改变数据的方式。第一种方式是直接<em>修改</em>变量的值，第二种方式是使用新的一份数据替换旧数据。</p>

<p>直接修改数据</p>

<div class="gatsby-highlight" data-language="jsx">
<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="token keyword">var</span> player <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Jeff&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
player<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment">// player 修改后的值为 {score: 2, name: &#39;Jeff&#39;}</span></code></pre>

<p id="data-change-without-mutation">新数据替换旧数据</p>

<div class="gatsby-highlight" data-language="jsx">
<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="token keyword">var</span> player <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Jeff&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> newPlayer <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> player<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// player 的值没有改变, 但是 newPlayer 的值是 {score: 2, name: &#39;Jeff&#39;}</span>

<span class="token comment">// 使用对象展开语法，就可以写成：</span>
<span class="token comment">// var newPlayer = {...player, score: 2};</span></code></pre>

<p>接下来我们把 Square 组件重写为一个<strong>函数组件</strong>。</p>

<p>如果你想写的组件只包含一个 <code class="gatsby-code-text">render</code> 方法，并且不包含 state，那么使用<strong>函数组件</strong>就会更简单。我们不需要定义一个继承于 <code class="gatsby-code-text">React.Component</code> 的类，我们可以定义一个函数，这个函数接收 <code class="gatsby-code-text">props</code> 作为参数，然后返回需要渲染的元素。函数组件写起来并不像 class 组件那么繁琐，很多组件都可以使用函数组件来写。</p>

<p>把 Square 类替换成下面的函数：</p>

<div class="gatsby-highlight" data-language="jsx">
<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="token keyword">function</span> <span class="token function">Square</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>square<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>onClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>

<p>我们把两个 <code class="gatsby-code-text">this.props</code> 都替换成了 <code class="gatsby-code-text">props</code>。</p>

<p>当我们把 Square 修改成函数组件时，我们同时也把 <code class="gatsby-code-text">onClick={() =&gt; this.props.onClick()}</code> 改成了更短的 <code class="gatsby-code-text">onClick={props.onClick}</code>（注意两侧<em>都</em>没有括号）。</p>

<p>轮流落子</p>

<p>现在井字棋还有一个明显的缺陷有待完善：目前还不能在棋盘上标记 &ldquo;O&rdquo;。</p>

<p>我们将 &ldquo;X&rdquo; 默认设置为先手棋。你可以通过修改 Board 组件的构造函数中的初始 state 来设置默认的第一步棋子：</p>

<div class="gatsby-highlight has-highlighted-lines" data-language="jsx">
<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">Board</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">squares</span><span class="token operator">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="gatsby-highlight-code-line">      <span class="token literal-property property">xIsNext</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>

<p>棋子每移动一步，<code class="gatsby-code-text">xIsNext</code>（布尔值）都会反转，该值将确定下一步轮到哪个玩家，并且游戏的状态会被保存下来。我们将通过修改 Board 组件的 <code class="gatsby-code-text">handleClick</code> 函数来反转 <code class="gatsby-code-text">xIsNext</code> 的值：</p>

<div class="gatsby-highlight has-highlighted-lines" data-language="jsx">
<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx">  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> squares <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>squares<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="gatsby-highlight-code-line">    squares<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>xIsNext <span class="token operator">?</span> <span class="token string">&#39;X&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;O&#39;</span><span class="token punctuation">;</span></span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">squares</span><span class="token operator">:</span> squares<span class="token punctuation">,</span>
<span class="gatsby-highlight-code-line">      <span class="token literal-property property">xIsNext</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>xIsNext<span class="token punctuation">,</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>

<p>修改之后，我们就实现了 &ldquo;X&rdquo; 和 &ldquo;O&rdquo; 轮流落子的效果。尝试玩一下。</p>

<p>接下来修改 Board 组件 <code class="gatsby-code-text">render</code> 方法中 &ldquo;status&rdquo; 的值，这样就可以显示下一步是哪个玩家的了。</p>

<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="gatsby-highlight-code-line">    <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token string">&#39;Next player: &#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>xIsNext <span class="token operator">?</span> <span class="token string">&#39;X&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;O&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token comment">// 其他部分没有改变</span></code></pre>

<p>现在你整个的 Board 组件的代码应该是下面这样的：</p>

<div class="gatsby-highlight has-highlighted-lines" data-language="jsx">
<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">Board</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">squares</span><span class="token operator">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="gatsby-highlight-code-line">      <span class="token literal-property property">xIsNext</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="gatsby-highlight-code-line">    <span class="token keyword">const</span> squares <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>squares<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">    squares<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>xIsNext <span class="token operator">?</span> <span class="token string">&#39;X&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;O&#39;</span><span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><span class="gatsby-highlight-code-line">      <span class="token literal-property property">squares</span><span class="token operator">:</span> squares<span class="token punctuation">,</span></span><span class="gatsby-highlight-code-line">      <span class="token literal-property property">xIsNext</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>xIsNext<span class="token punctuation">,</span></span><span class="gatsby-highlight-code-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>  <span class="token punctuation">}</span>

  <span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Square</span></span>
        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>squares<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">}</span></span>
        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
      <span class="token punctuation">/&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="gatsby-highlight-code-line">    <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token string">&#39;Next player: &#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>xIsNext <span class="token operator">?</span> <span class="token string">&#39;X&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;O&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>status<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>status<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>board-row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>board-row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>board-row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>

<p id="declaring-a-winner">判断出胜者</p>

<p>至此我们就可以看出下一步会轮到哪位玩家，与此同时，我们还需要显示游戏的结果来判定游戏结束。拷贝如下 calculateWinner 函数并粘贴到文件底部：</p>

<div class="gatsby-highlight" data-language="jsx">
<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="token keyword">function</span> <span class="token function">calculateWinner</span><span class="token punctuation">(</span><span class="token parameter">squares</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> lines <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lines<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>squares<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> squares<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">===</span> squares<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> squares<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">===</span> squares<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> squares<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>

<p>传入长度为 9 的数组，此函数将判断出获胜者，并根据情况返回 &ldquo;X&rdquo;，&ldquo;O&rdquo; 或 &ldquo;null&rdquo;。</p>

<p>接着，在 Board 组件的 <code class="gatsby-code-text">render</code> 方法中调用 <code class="gatsby-code-text">calculateWinner(squares)</code> 检查是否有玩家胜出。一旦有一方玩家胜出，就把获胜玩家的信息显示出来，比如，&ldquo;胜者：X&rdquo; 或者&ldquo;胜者：O&rdquo;。现在，我们把 Board 的 <code class="gatsby-code-text">render</code> 函数中的 status 的定义修改为如下代码：</p>

<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="gatsby-highlight-code-line">    <span class="token keyword">const</span> winner <span class="token operator">=</span> <span class="token function">calculateWinner</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>squares<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">    <span class="token keyword">let</span> status<span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>winner<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="gatsby-highlight-code-line">      status <span class="token operator">=</span> <span class="token string">&#39;Winner: &#39;</span> <span class="token operator">+</span> winner<span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span><span class="gatsby-highlight-code-line">      status <span class="token operator">=</span> <span class="token string">&#39;Next player: &#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>xIsNext <span class="token operator">?</span> <span class="token string">&#39;X&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;O&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">    <span class="token punctuation">}</span></span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token comment">// 其他部分没有修改</span></code></pre>

<p>最后，修改 <code class="gatsby-code-text">handleClick</code> 事件，当有玩家胜出时，或者某个 Square 已经被填充时，该函数不做任何处理直接返回。</p>

<div class="gatsby-highlight has-highlighted-lines" data-language="jsx">
<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx">  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> squares <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>squares<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="gatsby-highlight-code-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">calculateWinner</span><span class="token punctuation">(</span>squares<span class="token punctuation">)</span> <span class="token operator">||</span> squares<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="gatsby-highlight-code-line">      <span class="token keyword">return</span><span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">    <span class="token punctuation">}</span></span>    squares<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>xIsNext <span class="token operator">?</span> <span class="token string">&#39;X&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;O&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">squares</span><span class="token operator">:</span> squares<span class="token punctuation">,</span>
      <span class="token literal-property property">xIsNext</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>xIsNext<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>

<p id="storing-a-history-of-moves">保存历史记录</p>

<p>如果我们直接修改了 <code class="gatsby-code-text">square</code> 数组，实现时间旅行就会变得很棘手了。</p>

<p>不过，我们可以使用 <code class="gatsby-code-text">slice()</code> 函数为每一步创建 <code class="gatsby-code-text">squares</code> 数组的副本，同时把这个数组<a href="https://zh-hans.reactjs.org/tutorial/tutorial.html#why-immutability-is-important">当作不可变对象</a>。这样我们就可以把所有 <code class="gatsby-code-text">squares</code> 数组的历史版本都保存下来了，然后可以在历史的步骤中随意跳转。</p>

<p>我们把历史的 <code class="gatsby-code-text">squares</code> 数组保存在另一个名为 <code class="gatsby-code-text">history</code> 的数组中。<code class="gatsby-code-text">history</code> 数组保存了从第一步到最后一步的所有的棋盘状态。<code class="gatsby-code-text">history</code> 数组的结构如下所示：</p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>

<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx">history <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token comment">// 第一步之前</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">squares</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 第一步之后</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">squares</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;X&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 第二步之后</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">squares</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;X&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;O&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">]</span></code></pre>

<p>现在，我们需要确定应该在哪一个组件里保存 <code class="gatsby-code-text">history</code> 这个 state。</p>

<p id="lifting-state-up-again">再次提升状态</p>

<p>我们希望顶层 Game 组件展示出一个历史步骤的列表。这个功能需要访问 <code class="gatsby-code-text">history</code> 的数据，因此我们把 <code class="gatsby-code-text">history</code> 这个 state 放在顶层 Game 组件中。</p>

<p>我们把 <code class="gatsby-code-text">history</code> state 放在了 Game 组件中，这样就可以从它的子组件 Board 里面删除掉 <code class="gatsby-code-text">square</code> 中的 state。正如我们把 Square 组件的<a href="https://zh-hans.reactjs.org/tutorial/tutorial.html#lifting-state-up">状态提升</a>到 Board 组件一样，现在我们来把 state 从 Board 组件提升到顶层的 Game 组件里。这样，Game 组件就拥有了对 Board 组件数据的完全控制权，除此之外，还可以让 Game 组件控制 Board 组件，并根据 <code class="gatsby-code-text">history</code> 渲染历史步骤。</p>

<p>首先，我们在 Game 组件的构造函数中初始化 state：</p>
</div>

<div class="gatsby-highlight has-highlighted-lines" data-language="jsx">
<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
<span class="gatsby-highlight-code-line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="gatsby-highlight-code-line">    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span></span><span class="gatsby-highlight-code-line">      <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span></span><span class="gatsby-highlight-code-line">        <span class="token literal-property property">squares</span><span class="token operator">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="gatsby-highlight-code-line">      <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span><span class="gatsby-highlight-code-line">      <span class="token literal-property property">xIsNext</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span><span class="gatsby-highlight-code-line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">  <span class="token punctuation">}</span></span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>game<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>game-board<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Board</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>game-info<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token comment">/* status */</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token comment">/* TODO */</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
</div>
</div>
</div>
</div>

<p>下一步，我们让 Board 组件从 Game 组件中接收 <code class="gatsby-code-text">squares</code> 和 <code class="gatsby-code-text">onClick</code> 这两个 props。因为当前在 Board 组件中已经有一个对 Square 点击事件的监听函数了，所以我们需要把每一个 Square 的对应位置传递给 <code class="gatsby-code-text">onClick</code> 监听函数，这样监听函数就知道具体哪一个 Square 被点击了。以下是修改 Board 组件的几个必要步骤：</p>

<ul>
	<li>删除 Board 组件中的 <code class="gatsby-code-text">constructor</code> 构造函数。</li>
	<li>把 Board 组件的 <code class="gatsby-code-text">renderSquare</code> 中的 <code class="gatsby-code-text">this.state.squares[i]</code> 替换为 <code class="gatsby-code-text">this.props.squares[i]</code>。</li>
	<li>把 Board 组件的 <code class="gatsby-code-text">renderSquare</code> 中的 <code class="gatsby-code-text">this.handleClick(i)</code> 替换为 <code class="gatsby-code-text">this.props.onClick(i)</code>。</li>
</ul>

<p>修改后的 Board 组件如下所示：</p>

<div class="gatsby-highlight has-highlighted-lines" data-language="jsx">
<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">Board</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> squares <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>squares<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">calculateWinner</span><span class="token punctuation">(</span>squares<span class="token punctuation">)</span> <span class="token operator">||</span> squares<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    squares<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>xIsNext <span class="token operator">?</span> <span class="token string">&#39;X&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;O&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">squares</span><span class="token operator">:</span> squares<span class="token punctuation">,</span>
      <span class="token literal-property property">xIsNext</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>xIsNext<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Square</span></span>
<span class="gatsby-highlight-code-line">        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>squares<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">}</span></span></span><span class="gatsby-highlight-code-line">        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>      <span class="token punctuation">/&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> winner <span class="token operator">=</span> <span class="token function">calculateWinner</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>squares<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> status<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>winner<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      status <span class="token operator">=</span> <span class="token string">&#39;Winner: &#39;</span> <span class="token operator">+</span> winner<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      status <span class="token operator">=</span> <span class="token string">&#39;Next player: &#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>xIsNext <span class="token operator">?</span> <span class="token string">&#39;X&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;O&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>status<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>status<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>board-row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>board-row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>board-row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>

<p>接着，更新 Game 组件的 <code class="gatsby-code-text">render</code> 函数，使用最新一次历史记录来确定并展示游戏的状态：</p>

<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="gatsby-highlight-code-line">    <span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>history<span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">    <span class="token keyword">const</span> current <span class="token operator">=</span> history<span class="token punctuation">[</span>history<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">    <span class="token keyword">const</span> winner <span class="token operator">=</span> <span class="token function">calculateWinner</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>squares<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">    <span class="token keyword">let</span> status<span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>winner<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="gatsby-highlight-code-line">      status <span class="token operator">=</span> <span class="token string">&#39;Winner: &#39;</span> <span class="token operator">+</span> winner<span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span><span class="gatsby-highlight-code-line">      status <span class="token operator">=</span> <span class="token string">&#39;Next player: &#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>xIsNext <span class="token operator">?</span> <span class="token string">&#39;X&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;O&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">    <span class="token punctuation">}</span></span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>game<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>game-board<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="gatsby-highlight-code-line"><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Board</span></span></span><span class="gatsby-highlight-code-line">            <span class="token attr-name">squares</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>current<span class="token punctuation">.</span>squares<span class="token punctuation">}</span></span></span><span class="gatsby-highlight-code-line">            <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></span></span><span class="gatsby-highlight-code-line">          <span class="token punctuation">/&gt;</span></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>game-info<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="gatsby-highlight-code-line"><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>status<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token comment">/* TODO */</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>

<p>由于 Game 组件渲染了游戏的状态，因此我们可以将 Board 组件 <code class="gatsby-code-text">render</code> 方法中对应的代码移除。修改之后，Board 组件的 <code class="gatsby-code-text">render</code> 函数如下所示：</p>

<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="gatsby-highlight-code-line"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="gatsby-highlight-code-line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span><span class="gatsby-highlight-code-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span></span><span class="gatsby-highlight-code-line"><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>board-row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span><span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>board-row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>board-row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSquare</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>

<p>最后，我们需要把 Board 组件的 <code class="gatsby-code-text">handleClick</code> 方法移动 Game 组件中。同时，我们也需要修改一下 <code class="gatsby-code-text">handleClick</code> 方法，因为这两个组件的 state 在结构上有所不同。在 Game 组件的 <code class="gatsby-code-text">handleClick</code> 方法中，我们需要把新的历史记录拼接到 <code class="gatsby-code-text">history</code> 上。</p>

<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx">  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="gatsby-highlight-code-line">    <span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>history<span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">    <span class="token keyword">const</span> current <span class="token operator">=</span> history<span class="token punctuation">[</span>history<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">    <span class="token keyword">const</span> squares <span class="token operator">=</span> current<span class="token punctuation">.</span>squares<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">calculateWinner</span><span class="token punctuation">(</span>squares<span class="token punctuation">)</span> <span class="token operator">||</span> squares<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    squares<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>xIsNext <span class="token operator">?</span> <span class="token string">&#39;X&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;O&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
<span class="gatsby-highlight-code-line">      <span class="token literal-property property">history</span><span class="token operator">:</span> history<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span></span><span class="gatsby-highlight-code-line">        <span class="token literal-property property">squares</span><span class="token operator">:</span> squares<span class="token punctuation">,</span></span><span class="gatsby-highlight-code-line">      <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>      <span class="token literal-property property">xIsNext</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>xIsNext<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>

<p><code class="gatsby-code-text">concat()</code> 方法可能与你比较熟悉的 <code class="gatsby-code-text">push()</code> 方法不太一样，它并不会改变原数组，所以我们推荐使用 <code class="gatsby-code-text">concat()</code>。</p>

<p>到目前为止，Board 组件只需要 <code class="gatsby-code-text">renderSquare</code> 和 <code class="gatsby-code-text">render</code> 这两个方法。而游戏的状态和 <code class="gatsby-code-text">handleClick</code> 方法则会放在 Game 组件当中。</p>

<p>由于我们已经记录了井字棋的历史记录，因此我们可以把这些记录以历史步骤列表的形式展示给玩家。</p>

<p>在前文中提到的 React 元素被视为 JavaScript 一等公民中的对象（first-class JavaScript objects），因此我们可以把 React 元素在应用程序中当作参数来传递。在 React 中，我们还可以使用 React 元素的数组来渲染多个元素。</p>

<p>在 JavaScript 中，数组拥有 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" rel="nofollow noopener noreferrer" target="_blank"><code class="gatsby-code-text">map()</code> 方法</a>，该方法通常用于把某数组映射为另一个数组，例如：</p>

<div class="gatsby-highlight" data-language="jsx">
<div class="gatsby-highlight" data-language="jsx">
<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> doubled <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 4, 6]</span></code></pre>

<p>我们可以通过使用 <code class="gatsby-code-text">map</code> 方法，把历史步骤映射为代表按钮的 React 元素，然后可以展示出一个按钮的列表，点击这些按钮，可以&ldquo;跳转&rdquo;到对应的历史步骤。</p>

<p>现在，我们在 Game 组件的 <code class="gatsby-code-text">render</code> 方法中调用 <code class="gatsby-code-text">history</code> 的 <code class="gatsby-code-text">map</code> 方法：</p>

<div class="gatsby-highlight has-highlighted-lines" data-language="jsx">
<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>history<span class="token punctuation">;</span>
    <span class="token keyword">const</span> current <span class="token operator">=</span> history<span class="token punctuation">[</span>history<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> winner <span class="token operator">=</span> <span class="token function">calculateWinner</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>squares<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="gatsby-highlight-code-line">    <span class="token keyword">const</span> moves <span class="token operator">=</span> history<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">step<span class="token punctuation">,</span> move</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span><span class="gatsby-highlight-code-line">      <span class="token keyword">const</span> desc <span class="token operator">=</span> move <span class="token operator">?</span></span><span class="gatsby-highlight-code-line">        <span class="token string">&#39;Go to move #&#39;</span> <span class="token operator">+</span> move <span class="token operator">:</span></span><span class="gatsby-highlight-code-line">        <span class="token string">&#39;Go to game start&#39;</span><span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">      <span class="token keyword">return</span> <span class="token punctuation">(</span></span><span class="gatsby-highlight-code-line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span></span><span class="gatsby-highlight-code-line"><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">jumpTo</span><span class="token punctuation">(</span>move<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>desc<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span><span class="gatsby-highlight-code-line"><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span><span class="gatsby-highlight-code-line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
    <span class="token keyword">let</span> status<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>winner<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      status <span class="token operator">=</span> <span class="token string">&#39;Winner: &#39;</span> <span class="token operator">+</span> winner<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      status <span class="token operator">=</span> <span class="token string">&#39;Next player: &#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>xIsNext <span class="token operator">?</span> <span class="token string">&#39;X&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;O&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>game<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>game-board<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Board</span></span>
            <span class="token attr-name">squares</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>current<span class="token punctuation">.</span>squares<span class="token punctuation">}</span></span>
            <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
          <span class="token punctuation">/&gt;</span></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>game-info<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>status<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="gatsby-highlight-code-line"><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>moves<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>
</div>

<p>当我们遍历 <code class="gatsby-code-text">history</code> 数组时，<code class="gatsby-code-text">step</code> 变量指向的是当前 <code class="gatsby-code-text">history</code> 元素的值，而 <code class="gatsby-code-text">move</code> 则指向的是 <code class="gatsby-code-text">history</code> 元素的索引。此处，我们只对 <code class="gatsby-code-text">move</code> 感兴趣，因此未对 <code class="gatsby-code-text">step</code> 做任何处理。</p>

<p>对于井字棋历史记录的每一步，我们都创建出了一个包含按钮 <code class="gatsby-code-text">&lt;button&gt;</code> 元素的 <code class="gatsby-code-text">&lt;li&gt;</code> 的列表。这些按钮拥有一个 <code class="gatsby-code-text">onClick</code> 事件处理函数，在这个函数里调用了 <code class="gatsby-code-text">this.jumpTo()</code> 方法。但是我们还没有实现 <code class="gatsby-code-text">jumpTo()</code> 方法。到目前为止，我们可以看到一个游戏历史步骤的列表，以及开发者工具控制台的警告信息，警告信息如下：</p>

<p><img height="392" src="/uploads/ckeditor/pictures/281/image-20220818153047-6.png" width="897" /></p>

<p>我们来看一下上面的警告信息是什么意思。</p>

<p id="picking-a-key">选择一个 key</p>

<p>当我们需要渲染一个列表的时候，React 会存储这个列表每一项的相关信息。当我们要更新这个列表时，React 需要确定哪些项发生了改变。我们有可能增加、删除、重新排序或者更新列表项。</p>

<p>想象一下把下面的代码</p>
</div>
</div>

<div class="gatsby-highlight" data-language="html">
<pre class="gatsby-code-html">
<code class="gatsby-code-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Alexa: 7 tasks left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Ben: 5 tasks left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></code></pre>

<p>转换成下面的代码</p>

<div class="gatsby-highlight" data-language="html">
<pre class="gatsby-code-html">
<code class="gatsby-code-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Ben: 9 tasks left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Claudia: 8 tasks left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Alexa: 5 tasks left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></code></pre>

<p>除了数字发生了改变之外，阅读这段代码的人也许会认为我们把 Alexa 和 Ben 的顺序交换了位置，然后把 Claudia 插入到 Alexa 和 Ben 之间。然而，React 是电脑程序，它并不知道我们想要什么。因为 React 无法得知我们人类的意图，所以我们需要给每一个列表项一个确定的 <em>key</em> 属性，它可以用来区分不同的列表项和他们的同级兄弟列表项。你可以使用字符串，比如 <code class="gatsby-code-text">alexa</code>, <code class="gatsby-code-text">ben</code>, <code class="gatsby-code-text">claudia</code>。如果我们使用从数据库里获取的数据，那么 Alexa、Ben 和 Claudia 的数据库 ID 就可以作为 key 来使用。</p>

<div class="gatsby-highlight" data-language="html">
<pre class="gatsby-code-html">
<code class="gatsby-code-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>{user.id}</span><span class="token punctuation">&gt;</span></span>{user.name}: {user.taskCount} tasks left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></code></pre>

<p>每当一个列表重新渲染时，React 会根据每一项列表元素的 key 来检索上一次渲染时与每个 key 所匹配的列表项。如果 React 发现当前的列表有一个之前不存在的 key，那么就会创建出一个新的组件。如果 React 发现和之前对比少了一个 key，那么就会销毁之前对应的组件。如果一个组件的 key 发生了变化，这个组件会被销毁，然后使用新的 state 重新创建一份。</p>

<p><code class="gatsby-code-text">key</code> 是 React 中一个特殊的保留属性（还有一个是 <code class="gatsby-code-text">ref</code>，拥有更高级的特性）。当 React 元素被创建出来的时候，React 会提取出 <code class="gatsby-code-text">key</code> 属性，然后把 key 直接存储在返回的元素上。虽然 <code class="gatsby-code-text">key</code> 看起来好像是 <code class="gatsby-code-text">props</code> 中的一个，但是你不能通过 <code class="gatsby-code-text">this.props.key</code> 来获取 <code class="gatsby-code-text">key</code>。React 会通过 <code class="gatsby-code-text">key</code> 来自动判断哪些组件需要更新。组件是不能访问到它的 <code class="gatsby-code-text">key</code> 的。</p>

<p><strong>我们强烈推荐，每次只要你构建动态列表的时候，都要指定一个合适的 key。</strong>如果你没有找到一个合适的 key，那么你就需要考虑重新整理你的数据结构了，这样才能有合适的 key。</p>

<p>如果你没有指定任何 key，React 会发出警告，并且会把数组的索引当作默认的 key。但是如果想要对列表进行重新排序、新增、删除操作时，把数组索引作为 key 是有问题的。显式地使用 <code class="gatsby-code-text">key={i}</code> 来指定 key 确实会消除警告，但是仍然和数组索引存在同样的问题，所以大多数情况下最好不要这么做。</p>

<p>组件的 key 值并不需要在全局都保证唯一，只需要在当前的同一级元素之前保证唯一即可。</p>

<p id="implementing-time-travel">实现时间旅行</p>

<p>在井字棋的历史记录中，每一个历史步骤都有一个与之对应的唯一 ID：这个 ID 就是每一步棋的序号。因为历史步骤不需要重新排序、新增、删除，所以使用步骤的索引作为 <code class="gatsby-code-text">key</code> 是安全的。</p>

<p>在 Game 组件的 <code class="gatsby-code-text">render</code> 方法中，我们可以这样添加 key，<code class="gatsby-code-text">&lt;li key={move}&gt;</code>，这样关于 key 的警告就会消失了。</p>

<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"> <span class="token keyword">const</span> moves <span class="token operator">=</span> history<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">step<span class="token punctuation">,</span> move</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> desc <span class="token operator">=</span> move <span class="token operator">?</span>
        <span class="token string">&#39;Go to move #&#39;</span> <span class="token operator">+</span> move <span class="token operator">:</span>
        <span class="token string">&#39;Go to game start&#39;</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>
<span class="gatsby-highlight-code-line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>move<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">jumpTo</span><span class="token punctuation">(</span>move<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>desc<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>因为 <code class="gatsby-code-text">jumpTo</code> 还未定义，所以你点击列表项的按钮时，会出现报错。在我们实现 <code class="gatsby-code-text">jumpTo</code> 之前，我们向 Game 组件的 state 中添加 <code class="gatsby-code-text">stepNumber</code>，这个值代表我们当前正在查看哪一项历史记录。</p>

<p>首先，我们在 Game 的构造函数 <code class="gatsby-code-text">constructor</code> 中向初始 state 中添加 <code class="gatsby-code-text">stepNumber: 0</code>：</p>

<div class="gatsby-highlight has-highlighted-lines" data-language="jsx">
<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
        <span class="token literal-property property">squares</span><span class="token operator">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="gatsby-highlight-code-line">      <span class="token literal-property property">stepNumber</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>      <span class="token literal-property property">xIsNext</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}
</span></code>然后，我们在 Game 组件中定义 <code class="gatsby-code-text">jumpTo</code> 方法以更新状态 <code class="gatsby-code-text">stepNumber</code>。除此之外，当状态 <code class="gatsby-code-text">stepNumber</code> 是偶数时，我们还要把 <code class="gatsby-code-text">xIsNext</code> 设为 true：
</pre>

<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这个方法无更改</span>
  <span class="token punctuation">}</span>

<span class="gatsby-highlight-code-line">  <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token parameter">step</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="gatsby-highlight-code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><span class="gatsby-highlight-code-line">      <span class="token literal-property property">stepNumber</span><span class="token operator">:</span> step<span class="token punctuation">,</span></span><span class="gatsby-highlight-code-line">      <span class="token literal-property property">xIsNext</span><span class="token operator">:</span> <span class="token punctuation">(</span>step <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">,</span></span><span class="gatsby-highlight-code-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">  <span class="token punctuation">}</span></span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这个方法无更改</span>
  <span class="token punctuation">}</span></code></pre>

<p>在 <code class="gatsby-code-text">jumpTo</code> 方法中, 我们没有更新 state 中的 <code class="gatsby-code-text">history</code> 属性。这是因为 state 更新被合并了，或者用更简单的话说，React 不会更新 <code class="gatsby-code-text">setState</code> 方法中未提到的属性。<strong><a href="https://zh-hans.reactjs.org/docs/state-and-lifecycle.html#state-updates-are-merged">这篇文档</a></strong>对此有更详细的介绍。</p>

<p>接下来，我们还要修改 Game 组件的 <code class="gatsby-code-text">handleClick</code> 方法，当你点击方格的时候触发该方法。</p>

<p>新添加的 <code class="gatsby-code-text">stepNumber</code> state 用于给用户展示当前的步骤。每当我们落下一颗新棋子的时候，我们需要调用 <code class="gatsby-code-text">this.setState</code> 并传入参数 <code class="gatsby-code-text">stepNumber: history.length</code>，以更新 <code class="gatsby-code-text">stepNumber</code>。这就保证了保证每走一步 <code class="gatsby-code-text">stepNumber</code> 会跟着改变。</p>

<p>我们还把读取 <code class="gatsby-code-text">this.state.history</code> 换成了读取 <code class="gatsby-code-text">this.state.history.slice(0, this.state.stepNumber + 1)</code> 的值。如果我们&ldquo;回到过去&rdquo;，然后再走一步新棋子，原来的&ldquo;未来&rdquo;历史记录就不正确了，这个替换可以保证我们把这些&ldquo;未来&rdquo;的不正确的历史记录丢弃掉。</p>

<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="gatsby-highlight-code-line">    <span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>stepNumber <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>    <span class="token keyword">const</span> current <span class="token operator">=</span> history<span class="token punctuation">[</span>history<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> squares <span class="token operator">=</span> current<span class="token punctuation">.</span>squares<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">calculateWinner</span><span class="token punctuation">(</span>squares<span class="token punctuation">)</span> <span class="token operator">||</span> squares<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    squares<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>xIsNext <span class="token operator">?</span> <span class="token string">&#39;X&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;O&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">history</span><span class="token operator">:</span> history<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span>
        <span class="token literal-property property">squares</span><span class="token operator">:</span> squares
      <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="gatsby-highlight-code-line">      <span class="token literal-property property">stepNumber</span><span class="token operator">:</span> history<span class="token punctuation">.</span>length<span class="token punctuation">,</span></span>      <span class="token literal-property property">xIsNext</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>xIsNext<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>

<p>最后，修改 Game 组件的 <code class="gatsby-code-text">render</code> 方法，将代码从始终根据最后一次移动渲染修改为根据当前 <code class="gatsby-code-text">stepNumber</code> 渲染。</p>

<pre class="gatsby-code-jsx">
<code class="gatsby-code-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>history<span class="token punctuation">;</span>
<span class="gatsby-highlight-code-line">    <span class="token keyword">const</span> current <span class="token operator">=</span> history<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>stepNumber<span class="token punctuation">]</span><span class="token punctuation">;</span></span>    <span class="token keyword">const</span> winner <span class="token operator">=</span> <span class="token function">calculateWinner</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>squares<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 其他部分没有改变</span></code></pre>

<p><img height="297" src="/uploads/ckeditor/pictures/282/image-20220818154527-1.png" width="443" /></p>

<p>恭喜你！你已经完成了一个拥有以下功能的井字棋啦：</p>

<ul>
	<li>tic-tac-toe(三连棋)游戏的所有功能</li>
	<li>能够判定玩家何时获胜</li>
	<li>能够记录游戏进程</li>
	<li>允许玩家查看游戏的历史记录，也可以查看任意一个历史版本的游戏棋盘状态</li>
</ul>

<p>干的不错！我们希望你至此已经基本掌握了 React 的使用。</p>

<p>在这里可以查看最终的游戏代码:<strong><a href="https://codepen.io/gaearon/pen/gWWZgR?editors=0010" rel="nofollow noopener noreferrer" target="_blank">最终成果</a></strong>.</p>

<p>如果你还有充裕的时间，或者想练习一下刚刚学会的 React 新技能，这里有一些可以改进游戏的想法供你参考，这些功能的实现顺序的难度是递增的：</p>

<ol>
	<li>在游戏历史记录列表显示每一步棋的坐标，格式为 (列号, 行号)。</li>
	<li>在历史记录列表中加粗显示当前选择的项目。</li>
	<li>使用两个循环来渲染出棋盘的格子，而不是在代码里写死（hardcode）。</li>
	<li>添加一个可以升序或降序显示历史记录的按钮。</li>
	<li>每当有人获胜时，高亮显示连成一线的 3 颗棋子。</li>
	<li>当无人获胜时，显示一个平局的消息。</li>
</ol>

<p>通过这篇教程，我们接触了 React 中的一些概念，比如 React 元素、React 组件、props，还有 state。更多关于这些概念的细节的解释，参考<a href="https://zh-hans.reactjs.org/docs/hello-world.html">文档的其他部分</a>。了解更多关于组件定义的内容，参考<a href="https://zh-hans.reactjs.org/docs/react-component.html"><code class="gatsby-code-text">React.Component</code> API reference</a>。</p>

<p>&nbsp;</p>

<p>&nbsp;</p>
</div>

<p>&nbsp;</p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="notranslate" style="all: initial;">&nbsp;</div>

