---
layout: post
title: "ipfs - 学习使用 ipfs 的基本操作"
date: "2022-10-10"
categories: 
---
<p>参考：<a href="http://www.siwei.me/blog/posts/blockchain-ipfs-setup-ipfs-on-linux-server">http://www.siwei.me/blog/posts/blockchain-ipfs-setup-ipfs-on-linux-server</a></p>

<p>ipfs: 是一个类似于 百度网盘一样的东西， 大家都可以上传文件。 全世界有好多个节点（例如100W个）。 东西存放在哪里，并不清楚，只要知道我们可以随时使用就可以了</p>

<p><a href="https://cloudflare-ipfs.com/ipfs/">https://cloudflare-ipfs.com/ipfs/</a></p>

<p>上面的网址，是一个专门查看IPFS资料的入口。</p>

<p>使用方式： <a href="https://cloudflare-ipfs.com/ipfs/bafybeigsn4u4nv4uyskxhewakk5m2j2lluzhsbsayp76zh7nbqznrxwm7e/">https://cloudflare-ipfs.com/ipfs/bafybeigsn4u4nv4uyskxhewakk5m2j2lluzhsbsayp76zh7nbqznrxwm7e/</a></p>

<p>入口 + ipfs_cid 方式，就可以查看了。</p>

<p>安装：ipfs cluster</p>

<p>wget https://dist.ipfs.tech/ipfs-cluster-ctl/v1.0.2/ipfs-cluster-ctl_v1.0.2_linux-amd64.tar.gz</p>

<p>解压缩：tar zxvf ipfs-cluster-ctl_v1.0.2_linux-amd64.tar.gz</p>

<p><img height="426" src="/uploads/ckeditor/pictures/554/image-20221010103224-1.png" width="1920" /></p>

<p>然后更换目录，放在独立的文件夹吧</p>

<p>（&nbsp;mv /workspace/ddns_rails/ipfs-cluster-ctl ipfs-cluster-ctl<br />
linlin@linlin-i5:/workspace$ mv /workspace/ddns_rails/ipfs-cluster-ctl_v1.0.2_linux-amd64.tar.gz&nbsp; /workspace/ipfs-cluster-ctl/ipfs-cluster-ctl_v1.0.2_linux-amd64.tar.gz）</p>

<p>设置网络：source ~/env_source_env</p>

<p>获取docker-compose.yml</p>

<p>wget https://raw.githubusercontent.com/ipfs/ipfs-cluster/v1.0.2/docker-compose.yml</p>

<p>也可以直接本地创建（都可以使用）：</p>

<pre class="hljs http">
<span class="hljs-attribute">version</span>: <span class="hljs-string">&#39;3.4&#39;</span><span class="bash">
services:
  ipfs0:
    container_name: ipfs0
    image: ipfs/go-ipfs:latest
    ports:
     - <span class="hljs-string">&quot;4001:4001&quot;</span> <span class="hljs-comment"># ipfs swarm - expose if needed/wanted</span>
     - <span class="hljs-string">&quot;5001:5001&quot;</span> <span class="hljs-comment"># ipfs api - expose if needed/wanted</span>
     - <span class="hljs-string">&quot;8080:8080&quot;</span> <span class="hljs-comment"># ipfs gateway - expose if needed/wanted</span>
    volumes:
      - ./compose/ipfs0:/data/ipfs

  cluster0:
    container_name: cluster0
    image: ipfs/ipfs-cluster:latest
    depends_on:
      - ipfs0
    environment:
      CLUSTER_PEERNAME: cluster0
      CLUSTER_SECRET: <span class="hljs-variable">${CLUSTER_SECRET}</span> <span class="hljs-comment"># From shell variable if set</span>
      CLUSTER_IPFSHTTP_NODEMULTIADDRESS: /dns4/ipfs0/tcp/<span class="hljs-number">5001</span>
      CLUSTER_CRDT_TRUSTEDPEERS: <span class="hljs-string">&#39;*&#39;</span> <span class="hljs-comment"># Trust all peers in Cluster</span>
      CLUSTER_RESTAPI_HTTPLISTENMULTIADDRESS: /ip4/<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>/tcp/<span class="hljs-number">9094</span> <span class="hljs-comment"># Expose API</span>
      CLUSTER_MONITORPINGINTERVAL: <span class="hljs-number">2</span>s <span class="hljs-comment"># Speed up peer discovery</span>
    ports:
          <span class="hljs-comment"># Open API port (allows ipfs-cluster-ctl usage on host)</span>
          - <span class="hljs-string">&quot;127.0.0.1:9094:9094&quot;</span>
          <span class="hljs-comment"># The cluster swarm port would need  to be exposed if this container</span>
          <span class="hljs-comment"># was to connect to cluster peers on other hosts.</span>
          <span class="hljs-comment"># But this is just a testing cluster.</span>
          <span class="hljs-comment"># - &quot;9095:9095&quot; # Cluster IPFS Proxy endpoint</span>
          <span class="hljs-comment"># - &quot;9096:9096&quot; # Cluster swarm endpoint</span>
    volumes:
      - ./compose/cluster0:/data/ipfs-cluster</span>{% endhighlight %}

<p>sudo docker-compose up</p>

<p>如果要修改文件内容，就先停止：sudo docker-compose down,然后再启动sudo docker-compose up</p>

<p><img height="172" src="/uploads/ckeditor/pictures/555/image-20221010103647-2.png" width="863" /></p>

<p>测试：./ipfs-cluster-ctl peers ls</p>

<p><img height="100" src="/uploads/ckeditor/pictures/556/image-20221010103724-3.png" width="1553" /></p>

<p>出现报错</p>

<p>docker ps</p>

<p><img height="261" src="/uploads/ckeditor/pictures/557/image-20221010104201-1.png" width="1920" /></p>

<p>根据 docker log, 我们可以知道，有 ipfs cluster 运行在了docker 的 5001端口，该docker app映射到了 host 的9094, 9095, 9096端口</p>

<p>所以我们访问：curl localhost:9094/webui，就会404，就说明它一定是运行好了。</p>

<p>官网：<a href="https://docs.ipfs.tech/how-to/command-line-quick-start/#initialize-the-repository">https://docs.ipfs.tech/how-to/command-line-quick-start/#initialize-the-repository</a></p>

<p><a href="https://docs.ipfs.tech/how-to/command-line-quick-start/#initialize-the-repository">初始化：</a>ipfs init</p>

<p>ipfs cat /ipfs/QmQPeNsJPyVWPFDVHb77w8G42Fvo15z4bG2X8D2GhfbSXc/readme</p>

<p><img height="586" src="/uploads/ckeditor/pictures/561/image-20221010113203-1.png" width="1265" /></p>

<p>vim hi.html（内容为hihi）</p>

<p>ipfs add hi.html<img height="78" src="/uploads/ckeditor/pictures/562/image-20221010113251-2.png" width="1920" /></p>

<p>ipfs cat QmermPSVVcmcutmQ1woTAtUcByUvoS2F3ZcKdkdbuAdEi5<img height="78" src="/uploads/ckeditor/pictures/563/image-20221010113305-3.png" width="1202" /></p>

<p>安装：ipfs cli</p>

<p>参考：<a href="https://docs.ipfs.tech/how-to/command-line-quick-start">https://docs.ipfs.tech/how-to/command-line-quick-start</a></p>

<p>wget https://dist.ipfs.tech/kubo/v0.15.0/kubo_v0.15.0_linux-amd64.tar.gz</p>

<p>tar zxvf kubo_v0.15.0_linux-amd64.tar.gz kubo/</p>

