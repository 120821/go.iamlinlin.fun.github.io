---
layout: post
title: "条件运算符 JAVA"
date: "2022-06-09"
categories: 
---

                    <h3>自增自减运算符</h3> 
<p><strong>1、自增（++）自减（--）运算符</strong>是一种特殊的算术运算符，在算术运算符中需要两个操作数来进行运算，而自增自减运算符是一个操作数。<img alt="" height="78" src="https://img-blog.csdnimg.cn/45159fd0ee1d450f866460787dbcc3a0.png" width="289"></p> 
{% highlight %}<code class="language-java">
public class selfAddMinus{
    public static void main(String[] args){
        int a = 3;//定义一个变量；
        int b = ++a;//自增运算
        int c = 3;
        int d = --c;//自减运算
        System.out.println("进行自增运算后的值等于"+b);
        System.out.println("进行自减运算后的值等于"+d);
    }
}
{% endhighlight %} 
<p><strong>2、前缀自增自减法(++a,--a): </strong>先进行自增或者自减运算，再进行表达式运算。<img alt="" height="80" src="https://img-blog.csdnimg.cn/416434d2066b44deaf9d4cf0ca654f81.png" width="298"></p> 
<p> </p> 
{% highlight %}
public class selfAddMinus{
    public static void main(String[] args){
        int a = 5;//定义一个变量；
        int b = 5;
        int x = 2*++a;
        int y = 2*b++;
        System.out.println("自增运算符前缀运算后a="+a+",x="+x);
        System.out.println("自增运算符后缀运算后b="+b+",y="+y);
    }
}
{% endhighlight %} 
<p><strong>3、后缀自增自减法(a++,a--): </strong>先进行表达式运算，再进行自增或者自减运算 实例：</p> 
{% highlight %}<code class="language-java">
public class Test {
 
  public static void main(String[] args) {
     int a = 10;
     int b = 20;
     int c = 25;
     int d = 25;
     System.out.println("a + b = " + (a + b) );
     System.out.println("a - b = " + (a - b) );
     System.out.println("a * b = " + (a * b) );
     System.out.println("b / a = " + (b / a) );
     System.out.println("b % a = " + (b % a) );
     System.out.println("c % a = " + (c % a) );
     System.out.println("a++   = " +  (a++) );
     System.out.println("a--   = " +  (a--) );
     // 查看  d++ 与 ++d 的不同
     System.out.println("d++   = " +  (d++) );
     System.out.println("++d   = " +  (++d) );
  }
}
{% endhighlight %} 
<h2>运行结果<img alt="" height="227" src="https://img-blog.csdnimg.cn/2aa72c6ae4f144d8be430c5ae1751a5b.png" width="264">
</h2> 
<p> </p> 
<h2>关系运算符</h2> 
<p>下表为Java支持的关系运算符</p> 
<p>表格中的实例整数变量A的值为10，变量B的值为20：</p> 
<table><tbody>
<tr>
<th>运算符</th>
<th>描述</th>
<th>例子</th>
</tr>
<tr>
<td>==</td>
<td>检查如果两个操作数的值是否相等，如果相等则条件为真。</td>
<td>（A == B）为假。</td>
</tr>
<tr>
<td>!=</td>
<td>检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td>
<td>(A != B) 为真。</td>
</tr>
<tr>
<td>&gt; </td>
<td>检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td>
<td>（A&gt; B）为假。</td>
</tr>
<tr>
<td>&lt; </td>
<td>检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td>
<td>（A &lt;B）为真。</td>
</tr>
<tr>
<td>&gt;=</td>
<td>检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td>
<td>（A&gt; = B）为假。</td>
</tr>
<tr>
<td>&lt;=</td>
<td>检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td>
<td>（A &lt;= B）为真。</td>
</tr>
</tbody></table>
{% highlight %}
Test.java 文件代码：
public class Test {
 
  public static void main(String[] args) {
     int a = 10;
     int b = 20;
     System.out.println("a == b = " + (a == b) );
     System.out.println("a != b = " + (a != b) );
     System.out.println("a &gt; b = " + (a &gt; b) );
     System.out.println("a &lt; b = " + (a &lt; b) );
     System.out.println("b &gt;= a = " + (b &gt;= a) );
     System.out.println("b &lt;= a = " + (b &lt;= a) );
  }
}
{% endhighlight %} 
<h2><img alt="" height="144" src="https://img-blog.csdnimg.cn/e1aeaa1228ec48b49fe659baa3010fc9.png" width="208"></h2> 
<h2>逻辑运算符</h2> 
<p>下表列出了逻辑运算符的基本运算，假设布尔变量A为真，变量B为假</p> 
<table><tbody>
<tr>
<th>操作符</th>
<th>描述</th>
<th>例子</th>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td>
<td>（A &amp;&amp; B）为假。</td>
</tr>
<tr>
<td>| |</td>
<td>称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td>
<td>（A | | B）为真。</td>
</tr>
<tr>
<td>！</td>
<td>称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td>
<td>！（A &amp;&amp; B）为真。</td>
</tr>
</tbody></table>
<p> <img alt="" height="98" src="https://img-blog.csdnimg.cn/be61ebed1db7447e92906ff15b273440.png" width="222"></p> 
{% highlight %}
public class Test {
  public static void main(String[] args) {
     boolean a = true;
     boolean b = false;
     System.out.println("a &amp;&amp; b = " + (a&amp;&amp;b));
     System.out.println("a || b = " + (a||b) );
     System.out.println("!(a &amp;&amp; b) = " + !(a &amp;&amp; b));
  }
}
{% endhighlight %} 
<h2>条件运算符（?:）</h2> 
<p>条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p> 
{% highlight %}variable x = (expression) ? value if true : value if false{% endhighlight %} 
<h3>实例</h3> 
<h2>Test.java 文件代码：</h2> 
{% highlight %}<code class="language-java">
public class Test {
   public static void main(String[] args){
      int a , b;
      a = 10;
      // 如果 a 等于 1 成立，则设置 b 为 20，否则为 30
      b = (a == 1) ? 20 : 30;
      System.out.println( "Value of b is : " +  b );
 
      // 如果 a 等于 10 成立，则设置 b 为 20，否则为 30
      b = (a == 10) ? 20 : 30;
      System.out.println( "Value of b is : " + b );
   }
}
{% endhighlight %} 
<p>以上实例编译运行结果如下：</p> 
<p><img alt="" height="79" src="https://img-blog.csdnimg.cn/8e2d8dfaa43e4a32897f917b390d58a4.png" width="246"></p> 
<h2>Java运算符优先级</h2> 
<p>当多个运算符出现在一个表达式中，谁先谁后呢？这就涉及到运算符的优先级别的问题。在一个多运算符的表达式中，运算符优先级不同会导致最后得出的结果差别甚大。</p> 
<p>例如，（1+3）＋（3+2）*2，这个表达式如果按加号最优先计算，答案就是 18，如果按照乘号最优先，答案则是 14。</p> 
<p>再如，x = 7 + 3 * 2;这里x得到13，而不是20，因为乘法运算符比加法运算符有较高的优先级，所以先计算3 * 2得到6，然后再加7。</p> 
<p>下表中具有最高优先级的运算符在的表的最上面，最低优先级的在表的底部。</p> 
<table><tbody>
<tr>
<th>类别</th>
<th>操作符</th>
<th>关联性</th>
</tr>
<tr>
<td>后缀</td>
<td>() [] . (点操作符)</td>
<td>左到右</td>
</tr>
<tr>
<td>一元</td>
<td>expr++ expr--</td>
<td>从左到右</td>
</tr>
<tr>
<td>一元</td>
<td>++expr --expr + - ～ ！</td>
<td>从右到左</td>
</tr>
<tr>
<td>乘性 </td>
<td>* /％</td>
<td>左到右</td>
</tr>
<tr>
<td>加性 </td>
<td>+ -</td>
<td>左到右</td>
</tr>
<tr>
<td>移位 </td>
<td>&gt;&gt; &gt;&gt;&gt;  &lt;&lt; </td>
<td>左到右</td>
</tr>
<tr>
<td>关系 </td>
<td>&gt; &gt;= &lt; &lt;= </td>
<td>左到右</td>
</tr>
<tr>
<td>相等 </td>
<td>==  !=</td>
<td>左到右</td>
</tr>
<tr>
<td>按位与</td>
<td>＆</td>
<td>左到右</td>
</tr>
<tr>
<td>按位异或</td>
<td>^</td>
<td>左到右</td>
</tr>
<tr>
<td>按位或</td>
<td>|</td>
<td>左到右</td>
</tr>
<tr>
<td>逻辑与</td>
<td>&amp;&amp;</td>
<td>左到右</td>
</tr>
<tr>
<td>逻辑或</td>
<td>| |</td>
<td>左到右</td>
</tr>
<tr>
<td>条件</td>
<td>？：</td>
<td>从右到左</td>
</tr>
<tr>
<td>赋值</td>
<td>= + = - = * = / =％= &gt;&gt; = &lt;&lt; =＆= ^ = | =</td>
<td>从右到左</td>
</tr>
<tr>
<td>逗号</td>
<td>，</td>
<td>左到右</td>
</tr>
</tbody></table>
<p> </p>
                
